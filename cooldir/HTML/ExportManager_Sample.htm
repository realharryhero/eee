<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ExportManager_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="ExportManager API Sample Sample">
    <meta name="topicid" content="GUID-B801DDA8-9A0C-42AD-AC06-F8244CA08D65">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>ExportManager API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">ExportManager API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates how to export f3d to different formats.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback
import os.path, sys

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        
        
        <span style="color:blue"># get active design        </span>
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)
         
        <span style="color:blue"># get all components in this design</span>
        allComps = design.allComponents
         
        <span style="color:blue"># get the script location</span>
        scriptDir = os.path.dirname(os.path.realpath(__file__))        
         
        <span style="color:blue"># create a single exportManager instance</span>
        exportMgr = design.exportManager
        
        <span style="color:blue"># export the component one by one with a specified format</span>
        for comp in allComps:
            compName = comp.name
            fileName = scriptDir + "/" + compName
             
            <span style="color:blue"># export the component with IGS format</span>
            igesOptions = exportMgr.createIGESExportOptions(fileName, comp)
            exportMgr.execute(igesOptions)
             
            <span style="color:blue"># export the component with SAT format</span>
            satOptions = exportMgr.createSATExportOptions(fileName, comp)
            exportMgr.execute(satOptions)
         
            <span style="color:blue"># export the component with SMT format</span>
            smtOptions = exportMgr.createSMTExportOptions(fileName, comp)
            exportMgr.execute(smtOptions)
             
            <span style="color:blue"># export the component with STP format</span>
            stpOptions = exportMgr.createSTEPExportOptions(fileName, comp)
            exportMgr.execute(stpOptions)
             
            <span style="color:blue"># export the component with F3D format</span>
            archOptions = exportMgr.createFusionArchiveExportOptions(fileName, comp)
            exportMgr.execute(archOptions)
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Core/Application/Document.h&gt;

#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Fusion/ExportManager.h&gt;
#include &lt;Fusion/Fusion/ExportOptions.h&gt;
#include &lt;Fusion/Fusion/IGESExportOptions.h&gt;
#include &lt;Fusion/Fusion/FusionArchiveExportOptions.h&gt;
#include &lt;Fusion/Fusion/SATExportOptions.h&gt;
#include &lt;Fusion/Fusion/SMTExportOptions.h&gt;
#include &lt;Fusion/Fusion/STEPExportOptions.h&gt;
#include &lt;Fusion/Components/Components.h&gt;
#include &lt;Fusion/Components/Component.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

std::string getDllPath();

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;


	<span style="color:blue">// get active design</span>
	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// get all components in this design</span>
	Ptr&lt;Components&gt; comps = design-&gt;allComponents();
	if (!comps)
		return false;

	<span style="color:blue">// create a single exportManager instance</span>
	Ptr&lt;ExportManager&gt; exportMgr = design-&gt;exportManager();
	if (!exportMgr)
		return false;

	<span style="color:blue">// export the component one by one with a specified format</span>
	size_t count = comps-&gt;count();
	for (size_t index = 0; index &lt; count; ++index)
	{
		Ptr&lt;Component&gt; comp = comps-&gt;item(index);
		std::string name = comp-&gt;name();
		std::string fileName = getDllPath() + "/" + name;

		<span style="color:blue">// export the component with IGS format</span>
		Ptr&lt;IGESExportOptions&gt; igesOptions = exportMgr-&gt;createIGESExportOptions(fileName, comp);
		if (!igesOptions) continue;
		exportMgr-&gt;execute(igesOptions);

		<span style="color:blue">// export the component with SAT format</span>
		Ptr&lt;SATExportOptions&gt; satOptions = exportMgr-&gt;createSATExportOptions(fileName, comp);
		if (!satOptions) continue;
		exportMgr-&gt;execute(satOptions);

		<span style="color:blue">// export the component with SMT format</span>
		Ptr&lt;SMTExportOptions&gt; smtOptions = exportMgr-&gt;createSMTExportOptions(fileName, comp);
		if (!smtOptions) continue;
		exportMgr-&gt;execute(smtOptions);

		<span style="color:blue">// export the component with STP format</span>
		Ptr&lt;STEPExportOptions&gt; stepOptions = exportMgr-&gt;createSTEPExportOptions(fileName, comp);
		if (!stepOptions) continue;
		exportMgr-&gt;execute(stepOptions);

		<span style="color:blue">// export the component with F3D format</span>
		Ptr&lt;FusionArchiveExportOptions&gt; archOptions = exportMgr-&gt;createFusionArchiveExportOptions(fileName, comp);
		if (!stepOptions) continue;
		exportMgr-&gt;execute(archOptions);
	}


	return true;
}

#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span>

std::string getDllPath()
{
#if defined(_WINDOWS) || defined(_WIN32) || defined(_WIN64)
	HMODULE hModule = NULL;
	if (!GetModuleHandleExA(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | 
		GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
		(LPCSTR) &getDllPath, 
		&hModule))
		return "";

	char winTempPath[2048];
	::GetModuleFileNameA (hModule, winTempPath, 2048);

	std::string strPath = winTempPath;
	size_t stPos = strPath.rfind('\\');
	return strPath.substr(0, stPos);
#else
	Dl_info info;
	dladdr((void*) getDllPath, &info);

	std::string strPath = info.dli_fname;
	int stPos = (int)strPath.rfind('/');
	if(stPos != -1)
		return strPath.substr(0, stPos);
	else
		return "";;
#endif
}</pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                Â© Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ExportManager%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>