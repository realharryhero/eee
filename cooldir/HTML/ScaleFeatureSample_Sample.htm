<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ScaleFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Scale Feature API Sample Sample">
    <meta name="topicid" content="GUID-101B0BA0-4593-449A-8646-62B85043020C">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Scale Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Scale Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new scale feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        
        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create sketch</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        circle = sketchCircles.addByCenterRadius(centerPoint, 5.0)
        
        <span style="color:blue"># Get the profile defined by the circle</span>
        prof = sketch.profiles.item(0)

        <span style="color:blue"># Create an extrusion input</span>
        extrudes = rootComp.features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent is a distance extent of 5 cm</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(False, distance)

        <span style="color:blue"># Create the extrusion</span>
        ext = extrudes.add(extInput)
        
        <span style="color:blue"># Get the body created by the extrusion</span>
        body = ext.bodies.item(0)
        
        <span style="color:blue"># Create a scale input</span>
        inputColl = adsk.core.ObjectCollection.create()
        inputColl.add(body)
        
        basePt = sketch.sketchPoints.item(0)
        scaleFactor = adsk.core.ValueInput.createByReal(2)
        
        scales = rootComp.features.scaleFeatures
        scaleInput = scales.createInput(inputColl, basePt, scaleFactor)
        
        <span style="color:blue"># Set the scale to be non-uniform</span>
        xScale = adsk.core.ValueInput.createByReal(1.5)
        yScale = adsk.core.ValueInput.createByReal(3)
        zScale = adsk.core.ValueInput.createByReal(2)
        scaleInput.setToNonUniform(xScale, yScale, zScale)
        
        scale = scales.add(scaleInput)
        
        <span style="color:blue"># Create another sketch</span>
        sketchVertical = sketches.add(rootComp.yZConstructionPlane)
        sketchCirclesVertical = sketchVertical.sketchCurves.sketchCircles
        centerPointVertical = adsk.core.Point3D.create(0, 10, 0)
        cicleVertical = sketchCirclesVertical.addByCenterRadius(centerPointVertical, 5)
        
        <span style="color:blue"># Create an uniformed input for scale feature input</span>
        inputUniformColl = adsk.core.ObjectCollection.create()
        inputUniformColl.add(sketchVertical)
        
        scaleUniformInput = scales.createInput(inputUniformColl, basePt, scaleFactor)
        
        scaleUniform = scales.add(scaleUniformInput)
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/Geometry/Line3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/ScaleFeature.h&gt;
#include &lt;Fusion/Features/ScaleFeatures.h&gt;
#include &lt;Fusion/Features/ScaleFeatureInput.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchLine.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;
#include &lt;Fusion/Sketch/SketchPoint.h&gt;
#include &lt;Fusion/Sketch/SketchPoints.h&gt;

using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	<span style="color:blue">// Create sketch</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if(!sketches)
		return false;
	Ptr&lt;ConstructionPlane&gt; xz = rootComp-&gt;xZConstructionPlane();
	if(!xz)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(xz);
	if(!sketch)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if(!sketchCurves)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles = sketchCurves-&gt;sketchCircles();
	if(!sketchCircles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if(!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; circle = sketchCircles-&gt;addByCenterRadius(centerPoint, 5.0);
	if(!circle)
		return false;

	<span style="color:blue">// Get the profile defined by the circle</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if(!profs)
		return false;
	Ptr&lt;Profile&gt; prof = profs-&gt;item(0);
	if(!prof)
		return false;

	<span style="color:blue">// Create an extrusion input</span>
	Ptr&lt;Features&gt; feats = rootComp-&gt;features();
	if(!feats)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes = feats-&gt;extrudeFeatures();
	if(!extrudes)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extInput = extrudes-&gt;createInput(prof, FeatureOperations::NewBodyFeatureOperation);
	if(!extInput)
		return false;

	<span style="color:blue">// Define that the extent is a distance extent of 5 cm</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(5);
	if(!distance)
		return false;
	extInput-&gt;setDistanceExtent(false, distance);

	<span style="color:blue">// Create the extrusion</span>
	Ptr&lt;ExtrudeFeature&gt; ext = extrudes-&gt;add(extInput);
	if(!ext)
		return false;

	<span style="color:blue">// Get the body created by the extrusion</span>
	Ptr&lt;BRepBodies&gt; bodies = ext-&gt;bodies();
	if(!bodies)
		return false;
	Ptr&lt;BRepBody&gt; body = bodies-&gt;item(0);
	if(!body)
		return false;

	<span style="color:blue">// Create a scale input</span>
	Ptr&lt;ObjectCollection&gt; inputColl = ObjectCollection::create();
	if(!inputColl)
		return false;
	inputColl-&gt;add(body);

	Ptr&lt;SketchPoints&gt; sketchPts = sketch-&gt;sketchPoints();
	if(!sketchPts)
		return false;
	Ptr&lt;SketchPoint&gt; basePt = sketchPts-&gt;item(0);
	if(!basePt)
		return false;
	Ptr&lt;ValueInput&gt; scaleFactor = ValueInput::createByReal(2);
	if(!scaleFactor)
		return false;
	Ptr&lt;ScaleFeatures&gt; scales = feats-&gt;scaleFeatures();
	if(!scales)
		return false;
	Ptr&lt;ScaleFeatureInput&gt; scaleInput = scales-&gt;createInput(inputColl, basePt, scaleFactor);
	if(!scaleInput)
		return false;

	<span style="color:blue">// Set the scale to be non-uniform</span>
	Ptr&lt;ValueInput&gt; xScale = ValueInput::createByReal(1.5);
	if(!xScale)
		return false;
	Ptr&lt;ValueInput&gt; yScale = ValueInput::createByReal(3);
	if(!yScale)
		return false;
	Ptr&lt;ValueInput&gt; zScale = ValueInput::createByReal(2);
	if(!zScale)
		return false;
	scaleInput-&gt;setToNonUniform(xScale, yScale, zScale);

	Ptr&lt;ScaleFeature&gt; scale = scales-&gt;add(scaleInput);
	if(!scale)
		return false;

	<span style="color:blue">// Create another sketch</span>
	Ptr&lt;ConstructionPlane&gt; yz = rootComp-&gt;yZConstructionPlane();
	if(!yz)
		return false;
	Ptr&lt;Sketch&gt; sketchVertical = sketches-&gt;add(yz);
	if(!sketchVertical)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurvesVertical = sketchVertical-&gt;sketchCurves();
	if(!sketchCurvesVertical)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCirclesVertical = sketchCurvesVertical-&gt;sketchCircles();
	if(!sketchCirclesVertical)
		return false;
	Ptr&lt;Point3D&gt; centerPointVertical = Point3D::create(0, 10, 0);
	if(!centerPointVertical)
		return false;
	Ptr&lt;SketchCircle&gt; cicleVertical = sketchCirclesVertical-&gt;addByCenterRadius(centerPointVertical, 5);
	if(!cicleVertical)
		return false;

	<span style="color:blue">// Create an uniformed input for scale feature input</span>
	Ptr&lt;ObjectCollection&gt; inputUniformColl = ObjectCollection::create();
	if(!inputUniformColl)
		return false;
	inputUniformColl-&gt;add(sketchVertical);

	Ptr&lt;ScaleFeatureInput&gt; scaleUniformInput = scales-&gt;createInput(inputUniformColl, basePt, scaleFactor);
	if(!scaleUniformInput)
		return false;

	Ptr&lt;ScaleFeature&gt; scaleUniform = scales-&gt;add(scaleUniformInput);
	if(!scaleUniform)
		return false;

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ScaleFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>