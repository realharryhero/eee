<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/BaseFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="BaseFeature Sample Sample">
    <meta name="topicid" content="GUID-ddc16c4a-ea73-11e5-b9fc-3417ebd3d5be">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>BaseFeature Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">BaseFeature Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Creates a new base feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try: 
        app = adsk.core.Application.get()
        ui = app.userInterface

        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
        design = app.activeProduct
        design.designType = adsk.fusion.DesignTypes.ParametricDesignType

        <span style="color:blue"># Get the root component of the active design.</span>
        rootComp = design.rootComponent

        <span style="color:blue"># Create a base feature</span>
        baseFeats = rootComp.features.baseFeatures
        baseFeat = baseFeats.add()
        
        baseFeat.startEdit()
        
        <span style="color:blue"># Create construction plane in base feature</span>
        planes = rootComp.constructionPlanes
        planeInput = planes.createInput()
        planeInput.targetBaseOrFormFeature = baseFeat
        planeInput.setByOffset(rootComp.xYConstructionPlane, adsk.core.ValueInput.createByReal(1))
        plane = planes.add(planeInput)
        
        <span style="color:blue"># Create sketch in base feature</span>
        sketches = rootComp.sketches
        sketch = sketches.addToBaseOrFormFeature(plane, baseFeat, True)

        <span style="color:blue"># Draw a circle.</span>
        circles = sketch.sketchCurves.sketchCircles
        circles.addByCenterRadius(adsk.core.Point3D.create(0, 0, 0), 2)

        <span style="color:blue"># Get the profile defined by the circle.</span>
        prof = sketch.profiles.item(0)

        <span style="color:blue"># Create an extrusion input to be able to define the input needed for an extrusion</span>
        <span style="color:blue"># while specifying the profile and that a new component is to be created</span>
        extrudes = rootComp.features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)

        <span style="color:blue"># Define that the extent is a distance extent of 5 cm.</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(False, distance)
        extInput.baseFeature = baseFeat

        <span style="color:blue"># Create the extrusion.</span>
        ext = extrudes.add(extInput)
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Construction/ConstructionPlaneInput.h&gt;
#include &lt;Fusion/Construction/ConstructionPlanes.h&gt;
#include &lt;Fusion/Features/BaseFeature.h&gt;
#include &lt;Fusion/Features/BaseFeatures.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;

using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	design-&gt;designType(ParametricDesignType);

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	Ptr&lt;Features&gt; feats = rootComp-&gt;features();
	if(!feats)
		return false;

	<span style="color:blue">// Create a base feature</span>
	Ptr&lt;BaseFeatures&gt; baseFeats = feats-&gt;baseFeatures();
	if(!baseFeats)
		return false;

	Ptr&lt;BaseFeature&gt; baseFeat = baseFeats-&gt;add();
	if(!baseFeat)
		return false;

	baseFeat-&gt;startEdit();

	<span style="color:blue">// Create construction plane in base feature</span>
	Ptr&lt;ConstructionPlanes&gt; planes = rootComp-&gt;constructionPlanes();
	if(!planes)
		return false;
	Ptr&lt;ConstructionPlaneInput&gt; planeInput = planes-&gt;createInput();
	if(!planeInput)
		return false;
	planeInput-&gt;targetBaseOrFormFeature(baseFeat);
	planeInput-&gt;setByOffset(rootComp-&gt;xYConstructionPlane(), ValueInput::createByReal(1));
	Ptr&lt;ConstructionPlane&gt; plane = planes-&gt;add(planeInput);
	if(!plane)
		return false;

	<span style="color:blue">// Create sketch in base feature</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if(!sketches)
		return false;
	Ptr&lt;ConstructionPlane&gt; xyPlane = rootComp-&gt;xYConstructionPlane();
	if(!xyPlane)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;addToBaseOrFormFeature(xyPlane, baseFeat, true);
	if(!sketch)
		return false;

	<span style="color:blue">// Draw a circle.</span>
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if(!sketchCurves)
		return false;
	Ptr&lt;SketchCircles&gt; circles = sketchCurves-&gt;sketchCircles();
	if(!circles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if(!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; circle1 = circles-&gt;addByCenterRadius(centerPoint, 2);
	if(!circle1)
		return false;

	<span style="color:blue">// Get the profile defined by the circle.</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if(!profs)
		return false;
	Ptr&lt;Profile&gt; prof = profs-&gt;item(0);
	if(!prof)
		return false;

	<span style="color:blue">// Create an extrusion input to be able to define the input needed for an extrusion</span>
	<span style="color:blue">// while specifying the profile and that a new component is to be created</span>
	Ptr&lt;ExtrudeFeatures&gt; extrudes = feats-&gt;extrudeFeatures();
	if(!extrudes)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extInput = extrudes-&gt;createInput(prof, FeatureOperations::NewBodyFeatureOperation);
	if(!extInput)
		return false;

	<span style="color:blue">// Define that the extent is a distance extent of 5 cm.</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(5);
	if(!distance)
		return false;
	extInput-&gt;setDistanceExtent(false, distance);
	extInput-&gt;targetBaseFeature(baseFeat);

	<span style="color:blue">// Create the extrusion.</span>
	Ptr&lt;ExtrudeFeature&gt; ext = extrudes-&gt;add(extInput);
	if(!ext)
		return false;

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(BaseFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>