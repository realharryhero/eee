<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/TableCommandInput.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="19/9/2016">
    <meta name="user-comments" content="enable">
    <meta name="description" content="TableCommandInput Object">
    <meta name="topicid" content="GUID-C3F746B3-6488-4B74-A441-31AFDEFD1648">
    <meta name="language" content="ENU">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <title>TableCommandInput Object</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
            copyrightElement = document.getElementById('CopyrightNotice');
            copyrightElement.style.display = 'block';
          };
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">TableCommandInput Object
        </h1>
              Derived from: <a href="CommandInput.htm">CommandInput</a> Object
            <h2 class="api">
          Description
        </h2>Represents a table within a command dialog. The table consists of rows and columns where each cell can contain another command input. The  selection and button row command inputs cannot be used within a table. In addition to the rows and columns, each table can optionally have a toolbar of seperate command inputs that is shown at the bottom of the table.
 A table command input can conceptually be compared to an Excel table where you have an infinite number of rows and columns available but use a small portion. As you add inputs to the table, the table will adjust so all used columns are visible. The visible number of rows is controlled by you and if you create more rows than can be displayed a scroll bar becomes available.
 For an example of this command input, see the loft command which uses it to show the selected profiles and rails.<br /><br />Defined in namespace "adsk.core" and the header file is "Core/UserInterface/TableCommandInput.h".<h2 class="api">
            Methods
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_addCommandInput.htm">addCommandInput</a></td>
        <td class="api-list">Adds a command input to a particular cell in the table. Rows are automatically added to the table to able to contain the command input. The command input can span multiple columns within a row and spanning across multiple rows is not currently supported.
 The command input is created in the standard way but when it's added to the table using this method it  will be displayed in the table instead of the main area of the dialog.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_addToolbarCommandInput.htm">addToolbarCommandInput</a></td>
        <td class="api-list">Adds a new command input to the toolbar at the bottom of the table.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_classType.htm">classType</a></td>
        <td class="api-list">Static function that all classes support that returns the type of the class as a string.  The returned string matches the string returned by the objectType property. For example if you have a reference to an object and you want to check if it's a SketchLine you can use myObject.objectType == fusion.SketchLine.classType().</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_clear.htm">clear</a></td>
        <td class="api-list">Removes all rows in the table and the toolbar.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_deleteRow.htm">deleteRow</a></td>
        <td class="api-list">Deletes the specified row. The following rows will be shifted up. The row and the  command inputs it contains are deleted. To temporarily hide a row you can set the  visibility of all of the command inputs it contains to be invisible. If all inputs are invisible the row will automatically be hidden.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_getInputAtPosition.htm">getInputAtPosition</a></td>
        <td class="api-list">Returns the command input that is in the specified row and column. In the case where a command input spans multiple columns, the same input can be returned from mulitple positions.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_getPosition.htm">getPosition</a></td>
        <td class="api-list">Gets the position of the specified command input within the table.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_removeInput.htm">removeInput</a></td>
        <td class="api-list">Removes the command input that is at the specified row and column. This doesn't delete the command input from the collection of inputs associated with the command but just removes it from being displayed in the table.</td>
      </tr>
    </Table>
    <h2 class="api">
            Properties
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_columnRatio.htm">columnRatio</a></td>
        <td class="api-list">Gets and sets the width ratio of the columns. This is defined using a string such as "1:1:1" where this defines that the first three columns are all the same width. A value of "2:1" defines that the first column is twice the width of the second.
 If the table has more columns than are defined by this property, they will automatically default to a value of 1. If this property defines the width of more columns than are displayed, the extra definitions are ignored.
 You can also specify 0 as a column width and this will have the effect of hiding that column. Setting a column width to 0 does not delete the column or the command inputs but only hides them so they can be turned back on at a later time by resetting the column ratio.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_columnSpacing.htm">columnSpacing</a></td>
        <td class="api-list">Gets and sets the spacing between columns. This is defined in pixels. For a newly created table, this property defaults to 1.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_commandInputs.htm">commandInputs</a></td>
        <td class="api-list">Gets the CommandInputs class of the parent, which can be a Command, GroupCommandInput or TabCommandInput.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_hasGrid.htm">hasGrid</a></td>
        <td class="api-list">Gets and sets whether a grid is displayed for the table. For a newly created table, this property defaults to false.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_id.htm">id</a></td>
        <td class="api-list">Gets the unique identifier for this input in the command's CommandInputs.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_isEnabled.htm">isEnabled</a></td>
        <td class="api-list">Gets or sets if this input is currently enabled or disabled for user interaction.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_isFullWidth.htm">isFullWidth</a></td>
        <td class="api-list">Gets or sets if this input fills the entire width of the dialog. If true, the name is ignored and the input control will fill the entire width of the command dialog. The default value for this property in a new command input if false, or not to fill the width. This property does not apply to GroupCommandInputs or TabCommandInputs.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_isValid.htm">isValid</a></td>
        <td class="api-list">Indicates if this object is still valid, i.e. hasn't been deleted or some other action done to invalidate the reference.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_isVisible.htm">isVisible</a></td>
        <td class="api-list">Gets or sets if this input will be visible to the user.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_maximumVisibleRows.htm">maximumVisibleRows</a></td>
        <td class="api-list">Gets and sets the maximum number of rows that can be displayed. As rows are added the visible size of the table will grow to show all rows until this maximum number of rows is reached and then a scroll bar will be displayed to allow the user to access all rows. For a new created table, this property defaults to 4.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_minimumVisibleRows.htm">minimumVisibleRows</a></td>
        <td class="api-list">Gets and sets the minimum number of rows displayed. This is the minimum amount of space taken up on the command dialog, even if the table doesn't yet contain any rows. For a newly created table, this property defaults to 2.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_name.htm">name</a></td>
        <td class="api-list">Gets the user visible name of this input.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_numberOfColumns.htm">numberOfColumns</a></td>
        <td class="api-list">Returns the current number of visible columns displayed. Setting this property has no effect because the number of columns is automatically inferred by the command inputs that have been added to the table. The table automatically adjusts the number of rows displayed so all inputs can be seen.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_objectType.htm">objectType</a></td>
        <td class="api-list">Returns a string indicating the type of the object.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_parentCommand.htm">parentCommand</a></td>
        <td class="api-list">Gets the parent Command.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_parentCommandInput.htm">parentCommandInput</a></td>
        <td class="api-list">Gets the parent CommandInput if this commandInput is the child of a TabCommandInput or GroupCommandInput.  Returns null if their is no parent.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_rowCount.htm">rowCount</a></td>
        <td class="api-list">Returns the number of rows in the table. The actual number of rows in the table is defined by the number of rows that contain command inputs.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_rowSpacing.htm">rowSpacing</a></td>
        <td class="api-list">Gets and sets the spacing between rows. This is defined in pixels. For a newly created table, this property defaults to 1.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_selectedRow.htm">selectedRow</a></td>
        <td class="api-list">Gets and sets which row is selected in the user-interface. A value of 0 indicates that the first row is selected. A value of -1 indicates that no row is selected.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_tablePresentationStyle.htm">tablePresentationStyle</a></td>
        <td class="api-list">Gets and sets the presentation style the table is currently using for its display.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_toolClipFilename.htm">toolClipFilename</a></td>
        <td class="api-list">Gets or sets the full filename of the image file (png) used for the tool clip. The tooltip is always shown but as the user hovers over the control it will progressively display  the tool clip and description text.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_tooltip.htm">tooltip</a></td>
        <td class="api-list">Gets or sets the base tooltip string. This is always shown for commands. If the tooltip description  and/or tool clip are also specified then the tooltip will progressively display more information as the  user hovers the mouse over the control.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="TableCommandInput_tooltipDescription.htm">tooltipDescription</a></td>
        <td class="api-list">Gets or sets additional text to display progressively along with the tooltip. The text for the description  can contain some basic html formatting tags to format the tags. For example the br tag can be used to  create multiple paragraphs. The tooltip is always shown but as the user hovers over the control it will  progressively display the tool clip and description text.</td>
      </tr>
    </Table>
    <h2 class="api">
            Accessed From
          </h2><a href="CommandInputs_addTableCommandInput.htm">CommandInputs.addTableCommandInput</a><h2 class="api">
            Samples
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="CommandInputsSample_Sample.htm">Command Inputs API Sample</a></td>
        <td class="api-list"><p>Creates a command dialog that demonstrates all of the available command inputs.</p>

<p>To use the sample, create a new Python or C++ script and copy and paste this code, replacing the default code.  You also need to unpack this zip file which contains a <a href="../images/CommandInputsResources.zip">resource folder</a> into the same folder where the source code file (.py or .cpp) is.</p></td>
      </tr>
      <tr>
        <td class="api-list"><a href="CustomEventCommandDialog_Sample.htm">Custom Event for Command Dialog</a></td>
        <td class="api-list">Demonstrates using a custom event to process getting information in the background to display in a command dialog. This is an add-in and should be copied and pasted into an add-in project.</td>
      </tr>
    </Table>
    <h2 class="api">
            Version
          </h2>
        Introduced in version September 2016<br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(TableCommandInput%20Object%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>