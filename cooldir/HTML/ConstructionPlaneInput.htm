<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ConstructionPlaneInput.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="19/8/2014">
    <meta name="user-comments" content="enable">
    <meta name="description" content="ConstructionPlaneInput Object">
    <meta name="topicid" content="GUID-54946b6f-5ef6-4e0b-8467-51f5f055b53b">
    <meta name="language" content="ENU">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <title>ConstructionPlaneInput Object</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
            copyrightElement = document.getElementById('CopyrightNotice');
            copyrightElement.style.display = 'block';
          };
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">ConstructionPlaneInput Object
        </h1>
              Derived from: <a href="Base.htm">Base</a> Object
            <h2 class="api">
          Description
        </h2>A ConstructionPlaneInput is a throwaway object used to create a ConstructionPlane The usage pattern is: a. create a ConstructionPlaneInput (ConstructionPlanes.CreateInput) b. call one of the member functions to specify how the ConstructionPlane is created c. create the ConstructionPlane (call ConstructionPlanes.Add) d. stop referencing the ConstructionPlaneInput (so it gets deleted).<br /><br />Defined in namespace "adsk.fusion" and the header file is "Fusion/Construction/ConstructionPlaneInput.h".<h2 class="api">
            Methods
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_classType.htm">classType</a></td>
        <td class="api-list">Static function that all classes support that returns the type of the class as a string.  The returned string matches the string returned by the objectType property. For example if you have a reference to an object and you want to check if it's a SketchLine you can use myObject.objectType == fusion.SketchLine.classType().</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByAngle.htm">setByAngle</a></td>
        <td class="api-list">This input method is for creating a construction plane through an edge, axis or line at a specified angle. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit  component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByDistanceOnPath.htm">setByDistanceOnPath</a></td>
        <td class="api-list">This input method is for creating a construction plane normal to, and at  specified distance along, a path defined by an edge or sketch profile. This can result in a parametric or non-parametric  construction plane depending on whether the parent component is parametric or is a  direct edit component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByOffset.htm">setByOffset</a></td>
        <td class="api-list">This input method is for creating a construction plane that is offset from a planar  face or construction plane at a specified distance. This can result in  a parametric or non-parametric construction plane depending on whether the parent  component is parametric or is a direct edit component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByPlane.htm">setByPlane</a></td>
        <td class="api-list">This input method is for creating a non-parametric construction plane positioned in  space as defined by the input Plane object.
 This method of defining a construction plane is only valid when working in a direct edit model (do not capture design history). This is not valid when working in a parametric model and will fail.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByTangent.htm">setByTangent</a></td>
        <td class="api-list">This input method is for creating a construction plane tangent to a cylindrical or  conical face at a specified point. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit  component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByTangentAtPoint.htm">setByTangentAtPoint</a></td>
        <td class="api-list">This input method is for creating a construction plane tangent to a face  and aligned to a point. This can result in a parametric or non-parametric  construction plane depending on whether the parent component is parametric or is a  direct edit component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByThreePoints.htm">setByThreePoints</a></td>
        <td class="api-list">This input method is for creating a construction plane through three points that define a triangle. This can result in a parametric or non-parametric construction  plane depending on whether the parent component is parametric or is a direct edit  component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByTwoEdges.htm">setByTwoEdges</a></td>
        <td class="api-list">This input method is for creating a construction plane that passes through two coplanar linear entities or axes. Defines a plane by specifying two coplanar linear entities. This can result in a  parametric or non-parametric construction plane depending on whether the parent  component is parametric or is a direct edit component.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_setByTwoPlanes.htm">setByTwoPlanes</a></td>
        <td class="api-list">This input method is for creating a construction plane at the midpoint between two planar faces or construction planes. This can result in a parametric or  non-parametric construction plane depending on whether the parent component is  parametric or is a direct edit component.</td>
      </tr>
    </Table>
    <h2 class="api">
            Properties
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_creationOccurrence.htm">creationOccurrence</a></td>
        <td class="api-list">In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the ConstructionPlane is created based on geometry (e.g. a planarEntity) in another component AND (the ConstructionPlane) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_isValid.htm">isValid</a></td>
        <td class="api-list">Indicates if this object is still valid, i.e. hasn't been deleted or some other action done to invalidate the reference.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_objectType.htm">objectType</a></td>
        <td class="api-list">Returns a string indicating the type of the object.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneInput_targetBaseOrFormFeature.htm">targetBaseOrFormFeature</a></td>
        <td class="api-list">When creating a construction plane that is owned by a base or form feature, set this property to the  base or form feature you want to associate the new construction plane with. By default, this is null, meaning it will not be associated with a base or form feature.
 Because of a current limitation, if you want to create a construction plane associated with a base or form feature, you must set this property AND call the edit method of the base or form feature, create the feature, and then call the finishEdit method of the base or form feature. The base or form feature must be in an "edit" state to be able to add any additional items to it.</td>
      </tr>
    </Table>
    <h2 class="api">
            Accessed From
          </h2><a href="ConstructionPlanes_createInput.htm">ConstructionPlanes.createInput</a><h2 class="api">
            Samples
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="ConstructionPlaneSample_Sample.htm">Construction Plane API Sample</a></td>
        <td class="api-list">Demonstrates creating construction plane by different ways.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="LoftFeatureSample_Sample.htm">Loft Feature API Sample</a></td>
        <td class="api-list">Demonstrates creating a new loft feature.</td>
      </tr>
    </Table>
    <h2 class="api">
            Version
          </h2>
        Introduced in version August 2014<br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ConstructionPlaneInput%20Object%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>