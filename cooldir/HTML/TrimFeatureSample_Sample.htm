<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/TrimFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Trim Feature API Sample Sample">
    <meta name="topicid" content="GUID-1bb51374-23a9-11e5-b943-f8b156d7cd97">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Trim Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Trim Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new trim feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        
        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design.</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create sketch</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        sketchCircle = sketchCircles.addByCenterRadius(centerPoint, 3.0)
        
        <span style="color:blue"># Create a open profile for extrusion.</span>
        openProfile = rootComp.createOpenProfile(sketchCircle)
        
        <span style="color:blue"># Create an extrusion input.</span>
        features = rootComp.features
        extrudes = features.extrudeFeatures
        extrudeInput = extrudes.createInput(openProfile, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        extrudeInput.isSolid = False
        
        <span style="color:blue"># Define the extent with a distance extent of 3 cm.</span>
        distance = adsk.core.ValueInput.createByReal(3.0)
        extrudeInput.setDistanceExtent(False, distance)
        
        <span style="color:blue"># Create the extrusion.</span>
        extrude = extrudes.add(extrudeInput)
        
        <span style="color:blue"># Get the body created by extrusion</span>
        body = extrude.bodies[0]
        
        <span style="color:blue"># Create sketch 2.</span>
        sketch2 = sketches.add(rootComp.xYConstructionPlane);
        sketchLines = sketch2.sketchCurves.sketchLines;
        startPoint = adsk.core.Point3D.create(-5, 0, 0);
        endPoint = adsk.core.Point3D.create(5, 0, 0);
        sketchLine = sketchLines.addByTwoPoints(startPoint, endPoint);
        openProfile2 = rootComp.createOpenProfile(sketchLine);
        
        <span style="color:blue"># Create a open profile for extrusion.</span>
        extrudeInput2 = extrudes.createInput(openProfile2, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        extrudeInput2.isSolid = False
        
        <span style="color:blue"># Define the extent</span>
        distance2 = adsk.core.ValueInput.createByReal(5.0)
        extrudeInput2.setDistanceExtent(False, distance2)
        
        <span style="color:blue"># Create the extrusion.</span>
        extrudes.add(extrudeInput2)
        
        <span style="color:blue"># Create trim feature</span>
        trims = features.trimFeatures
        trimInput = trims.createInput(body)
        cells = trimInput.bRepCells
        cells[0].isSelected = True
        trims.add(trimInput)
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/Features/BRepCells.h&gt;
#include &lt;Fusion/Features/BRepCell.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/TrimFeatures.h&gt;
#include &lt;Fusion/Features/TrimFeatureInput.h&gt;
#include &lt;Fusion/Features/TrimFeature.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;
#include &lt;Fusion/Sketch/SketchLine.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;



using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design.</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	<span style="color:blue">// Create sketch circle on the xz plane.</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if(!sketches)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
	if(!sketch)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if(!sketchCurves)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCirles = sketchCurves-&gt;sketchCircles();
	if(!sketchCirles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if(!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; sketchCircle = sketchCirles-&gt;addByCenterRadius(centerPoint, 3.0);
	if(!sketchCircle)
		return false;

	<span style="color:blue">// Create a open profile for extrusion.</span>
	Ptr&lt;Profile&gt; openProfile = rootComp-&gt;createOpenProfile(sketchCircle);

	<span style="color:blue">// Create an extrusion input.</span>
	Ptr&lt;Features&gt; features = rootComp-&gt;features();
	if (!features)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes = features-&gt;extrudeFeatures();
	if (!extrudes)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extrudeInput = extrudes-&gt;createInput(openProfile, FeatureOperations::NewBodyFeatureOperation);
	if (!extrudeInput)
		return false;
	extrudeInput-&gt;isSolid(false);

	<span style="color:blue">// Define the extent with a distance extent of 3 cm.</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(3.0);
	if (!distance)
		return false;
	extrudeInput-&gt;setDistanceExtent(false, distance);

	<span style="color:blue">// Create the extrusion.</span>
	Ptr&lt;ExtrudeFeature&gt; extrude = extrudes-&gt;add(extrudeInput);
	if (!extrude)
		return false;
	
	<span style="color:blue">// Get the body created by extrusion.</span>
	Ptr&lt;BRepBodies&gt; bodies = extrude-&gt;bodies();
	if (!bodies)
		return false;
	Ptr&lt;BRepBody&gt; body = bodies-&gt;item(0);

	<span style="color:blue">// Create sketch 2.</span>
	Ptr&lt;Sketch&gt; sketch2 = sketches-&gt;add(rootComp-&gt;xYConstructionPlane());
	if(!sketch2)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves2 = sketch2-&gt;sketchCurves();
	if(!sketchCurves2)
		return false;
	Ptr&lt;SketchLines&gt; sketchLines = sketchCurves2-&gt;sketchLines();
	if (!sketchLines)
		return false;
	Ptr&lt;Point3D&gt; startPoint = Point3D::create(-5.0, 0, 0);
	Ptr&lt;Point3D&gt; endPoint = Point3D::create(5.0, 0, 0);
	Ptr&lt;SketchLine&gt; sketchLine = sketchLines-&gt;addByTwoPoints(startPoint, endPoint);

	<span style="color:blue">// Create a open profile.</span>
	Ptr&lt;Profile&gt; openProfile2 = rootComp-&gt;createOpenProfile(sketchLine);

	<span style="color:blue">// Create an extrusion input.</span>
	Ptr&lt;ExtrudeFeatureInput&gt; extrudeInput2 = extrudes-&gt;createInput(openProfile2, FeatureOperations::NewBodyFeatureOperation);
	if (!extrudeInput2)
		return false;
	extrudeInput2-&gt;isSolid(false);

	<span style="color:blue">// Define the extent.</span>
	Ptr&lt;ValueInput&gt; distance2 = ValueInput::createByReal(5.0);
	extrudeInput2-&gt;setDistanceExtent(false, distance2);

	<span style="color:blue">// Create the extrusion.</span>
	extrudes-&gt;add(extrudeInput2);

	<span style="color:blue">// Create trim feature.</span>
	Ptr&lt;TrimFeatures&gt; trims = features-&gt;trimFeatures();
	if (!trims)
		return false;
	Ptr&lt;TrimFeatureInput&gt; trimInput = trims-&gt;createInput(body);
	if (!trimInput)
		return false;
	Ptr&lt;BRepCells&gt; cells = trimInput-&gt;bRepCells();
	if (!cells)
		return false;
	Ptr&lt;BRepCell&gt; cell = cells-&gt;item(0);
	if (!cell)
		return false;
	cell-&gt;isSelected(true);
	trims-&gt;add(trimInput);


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(TrimFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>