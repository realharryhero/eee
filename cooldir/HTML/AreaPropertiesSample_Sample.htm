<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/AreaPropertiesSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="API Sample for AreaProperties Sample">
    <meta name="topicid" content="GUID-7d2616cc-c412-11e5-bf84-f8b156d7cd97">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>API Sample for AreaProperties</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">API Sample for AreaProperties API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates how to use AreaProperties<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface

        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)

        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent

        <span style="color:blue"># Create sketch</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        
        <span style="color:blue"># Create sketch circle</span>
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        sketchCircles.addByCenterRadius(centerPoint, 5.0)        
        centerPointTwo = adsk.core.Point3D.create(10, 0, 0)
        sketchCircles.addByCenterRadius(centerPointTwo, 5.0)
        
        <span style="color:blue"># Get the profiles defined by the circle</span>
        prof = sketch.profiles.item(0)
        profTwo = sketch.profiles.item(1)
        
        <span style="color:blue"># Get area properties from a profile</span>
        areaProps = prof.areaProperties(adsk.fusion.CalculationAccuracy.MediumCalculationAccuracy)
        
        <span style="color:blue"># Get area</span>
        area = areaProps.area
        
        <span style="color:blue"># Get centroid</span>
        centroid = areaProps.centroid
        
        <span style="color:blue"># Get perimeter</span>
        perimeter = areaProps.perimeter
        
        <span style="color:blue"># Get angle of rotation of the principal axes</span>
        rotationOfPrincipal = areaProps.rotationToPrincipal
        
        <span style="color:blue"># Accuracy</span>
        accuracy = areaProps.accuracy
        
        <span style="color:blue"># Get area properties from two profiles</span>
        inputs = adsk.core.ObjectCollection.create()
        inputs.add(prof)
        inputs.add(profTwo)
        areaProps = design.areaProperties(inputs)
        
        <span style="color:blue"># Get principal axes</span>
        (retVal, xAxis, yAxis) = areaProps.getPrincipalAxes()
        
        <span style="color:blue"># Get centroid moments of inertia</span>
        (retVal, centixx, centiyy, centizz, centixy, centiyz, centixz) = areaProps.getCentroidMomentsOfInertia()
        
        <span style="color:blue"># Get principal moments of inertia</span>
        (retVal, i1, i2, i3) = areaProps.getPrincipalMomentsOfInertia()
        
        <span style="color:blue"># Get radius of gyration</span>
        (retVal, kxx, kyy, kzz) = areaProps.getRadiusOfGyration()
        
        <span style="color:blue"># Get moments of inertia</span>
        (retVal, ixx, iyy, izz, ixy, iyz, ixz) = areaProps.getMomentsOfInertia()
 
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/Geometry/Vector3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchPoints.h&gt;
#include &lt;Fusion/Sketch/SketchPoint.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/Fusion/AreaProperties.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; docs = app-&gt;documents();
	if (!docs)
		return false;

	<span style="color:blue">// Create a document.</span>
	Ptr&lt;Document&gt; doc = docs-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Design&gt; design = app-&gt;activeProduct();
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// Create sketch</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if (!sketches)
		return false;

	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(rootComp-&gt;xYConstructionPlane());
	if (!sketch)
		return false;

	<span style="color:blue">// Create two sketch circles</span>
	Ptr&lt;SketchCurves&gt; curves = sketch-&gt;sketchCurves();
	if (!curves)
		return false;

	Ptr&lt;SketchCircles&gt; circles = curves-&gt;sketchCircles();
	if (!circles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	circles-&gt;addByCenterRadius(centerPoint, 5.0);
	Ptr&lt;Point3D&gt; centerPointTwo = Point3D::create(10.0, 0, 0);
	circles-&gt;addByCenterRadius(centerPointTwo, 5.0);

	<span style="color:blue">// Get the profiles defined by the circle</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if (!profs)
		return false;

	Ptr&lt;Profile&gt; prof = profs-&gt;item(0);
	Ptr&lt;Profile&gt; profTwo = profs-&gt;item(1);

	<span style="color:blue">// Get area properties from a profile</span>
	Ptr&lt;AreaProperties&gt; areaProps = prof-&gt;areaProperties(CalculationAccuracy::LowCalculationAccuracy);
	if (!areaProps)
		return false;

	<span style="color:blue">// Get area</span>
	double area = areaProps-&gt;area();

	<span style="color:blue">// Get centroid</span>
	Ptr&lt;Point3D&gt; centroid = areaProps-&gt;centroid();

	<span style="color:blue">// Get perimeter</span>
	double perimeter = areaProps-&gt;perimeter();

	<span style="color:blue">// Get angle of rotation of the principal axes</span>
	double rotationOfPrincipal = areaProps-&gt;rotationToPrincipal();

	<span style="color:blue">// Accuracy</span>
	CalculationAccuracy accuracy = areaProps-&gt;accuracy();

	<span style="color:blue">// Get area properties from two profiles</span>
	Ptr&lt;ObjectCollection&gt; inputs = ObjectCollection::create();
	if (!inputs)
		return false;
	inputs-&gt;add(prof);
	inputs-&gt;add(profTwo);
	areaProps = design-&gt;areaProperties(inputs);
	if (!areaProps)
		return false;

	<span style="color:blue">// Get principal axes</span>
	Ptr&lt;Vector3D&gt; xAxis;
	Ptr&lt;Vector3D&gt; yAxis;
	areaProps-&gt;getPrincipalAxes(xAxis, yAxis);

	<span style="color:blue">// Get moments of inertia</span>
	double ixx = 0, iyy = 0, izz = 0, ixy = 0, iyz = 0, ixz = 0;
	areaProps-&gt;getMomentsOfInertia(ixx, iyy, izz, ixy, iyz, ixz);

	<span style="color:blue">// Get centroid moments of inertia</span>
	double centixx = 0, centiyy = 0, centizz = 0, centixy = 0, centiyz = 0, centixz = 0;
	areaProps-&gt;getCentroidMomentsOfInertia(centixx, centiyy, centizz, centixy, centiyz, centixz);

	<span style="color:blue">// Get principal moments of inertia</span>
	double i1 = 0, i2 = 0, i3 = 0;
	areaProps-&gt;getPrincipalMomentsOfInertia(i1, i2, i3);

	<span style="color:blue">// Get radius of gyration</span>
	double kxx = 0, kyy = 0, kzz = 0;
	areaProps-&gt;getRadiusOfGyration(kxx, kyy, kzz);

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(AreaPropertiesSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>