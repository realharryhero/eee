<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/FilletFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Fillet Feature API Sample Sample">
    <meta name="topicid" content="GUID-b46c8a2c-f30f-11e4-9ac6-005056c00008">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Fillet Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Fillet Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new fillet feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        

        <span style="color:blue"># Get active design        </span>
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)
        
        <span style="color:blue"># Get root component in this design</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Get fillet features</span>
        fillets = rootComp.features.filletFeatures
        
        <span style="color:blue"># Create constant-radius fillet</span>
        edges1 = rootComp.bRepBodies.item(0).faces.item(0).edges
        edgeCollection1 = adsk.core.ObjectCollection.create()
        for edge in edges1:
            edgeCollection1.add(edge);  
        radius1 = adsk.core.ValueInput.createByReal(0.3)
        
        input1 = fillets.createInput()  
        input1.addConstantRadiusEdgeSet(edgeCollection1, radius1, True)
        input1.isG2 = False
        input1.isRollingBallCorner = True
        
        fillet1 = fillets.add(input1)
        fillet1.deleteMe()
        
        <span style="color:blue"># Create variable-radius fillet</span>
        edgeCollection2 = adsk.core.ObjectCollection.create()
        edgeCollection2.add(rootComp.bRepBodies.item(0).faces.item(0).edges.item(0))
        startRadius = adsk.core.ValueInput.createByString("1.0 mm")
        endRadius = adsk.core.ValueInput.createByString("5.0 mm")
        positions = [];
        positions.append(adsk.core.ValueInput.createByReal(0.3))
        positions.append(adsk.core.ValueInput.createByReal(0.6))
        radii = [];
        radii.append(adsk.core.ValueInput.createByString("2.0 mm"))
        radii.append(adsk.core.ValueInput.createByString("3.0 mm"))
        
        input2 = fillets.createInput()
        input2.addVariableRadiusEdgeSet(edgeCollection2, startRadius, endRadius, positions, radii)
        input2.isG2 = True
        input2.isRollingBallCorner = False
        
        fillet2 = fillets.add(input2)   
        fillet2.deleteMe()
        
        <span style="color:blue"># Create chord-length fillet</span>
        edges3 = rootComp.bRepBodies.item(0).faces.item(0).edges
        edgeCollection3 = adsk.core.ObjectCollection.create()
        for edge in edges3:
            edgeCollection3.add(edge);  
        chordLength = adsk.core.ValueInput.createByReal(1.0)
        
        input3 = fillets.createInput()  
        input3.addChordLengthEdgeSet(edgeCollection3, chordLength, True)
        input3.isG2 = False
        input3.isRollingBallCorner = True
        
        fillets.add(input3)        
        

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Application/Document.h&gt;

#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepEdges.h&gt;
#include &lt;Fusion/BRep/BRepEdge.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/FilletFeatures.h&gt;
#include &lt;Fusion/Features/FilletFeature.h&gt;
#include &lt;Fusion/Features/FilletFeatureInput.h&gt;



using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;


	<span style="color:blue">// Get active design</span>
	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get root component in this design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// Get fillet features</span>
	Ptr&lt;Features&gt; features = rootComp-&gt;features();
	if (!features)
		return false;

	Ptr&lt;FilletFeatures&gt; fillets = features-&gt;filletFeatures();
	if (!fillets)
		return false;

	<span style="color:blue">// Get edges of top face in the first body</span>
	Ptr&lt;BRepBodies&gt; bodies = rootComp-&gt;bRepBodies();
	if (!bodies)
		return false;

	Ptr&lt;BRepBody&gt; body1 = bodies-&gt;item(0);
	if (!body1)
		return false;

	Ptr&lt;BRepFaces&gt; faces1 = body1-&gt;faces();
	if (!faces1)
		return false;

	Ptr&lt;BRepFace&gt; face1 = faces1-&gt;item(0);
	if (!face1)
		return false;

	Ptr&lt;BRepEdges&gt; edges1 = face1-&gt;edges();
	if (!edges1)
		return false;

	<span style="color:blue">// Create constant-radius fillet</span>
	Ptr&lt;ObjectCollection&gt; edgeCollection1 = ObjectCollection::create();
	if (!edgeCollection1)
		return false;

	for (Ptr&lt;BRepEdge&gt; edge : edges1)
		edgeCollection1-&gt;add(edge);

	Ptr&lt;ValueInput&gt; radius1 = ValueInput::createByReal(0.3);
	if (!radius1)
		return false;

	Ptr&lt;FilletFeatureInput&gt; input1 = fillets-&gt;createInput();
	if (!input1)
		return false;

	input1-&gt;addConstantRadiusEdgeSet(edgeCollection1, radius1, true);
	input1-&gt;isG2(false);
	input1-&gt;isRollingBallCorner(true);

	Ptr&lt;FilletFeature&gt; fillet1 = fillets-&gt;add(input1);
	if (!fillet1)
		return false;

	fillet1-&gt;deleteMe();

	<span style="color:blue">// Create variable-radius fillet</span>
	Ptr&lt;ObjectCollection&gt; edgeCollection2 = ObjectCollection::create();
	if (!edgeCollection2)
		return false;

	Ptr&lt;BRepEdge&gt; edge1 = edges1-&gt;item(0);
	if (!edge1)
		return false;
	edgeCollection2-&gt;add(edge1);

	Ptr&lt;ValueInput&gt; startRadius = ValueInput::createByString("1.0 mm");
	if (!startRadius)
		return false;

	Ptr&lt;ValueInput&gt; endRadius = ValueInput::createByString("5.0 mm");
	if (!endRadius)
		return false;

	std::vector&lt;Ptr&lt;ValueInput&gt; &gt; positions;
	positions.push_back(ValueInput::createByReal(0.3));
	positions.push_back(ValueInput::createByReal(0.6));
	std::vector&lt;Ptr&lt;ValueInput&gt; &gt; radii;
	radii.push_back(ValueInput::createByString("2.0 mm"));
	radii.push_back(ValueInput::createByString("3.0 mm"));

	Ptr&lt;FilletFeatureInput&gt; input2 = fillets-&gt;createInput();
	if (!input2)
		return false;

	input2-&gt;addVariableRadiusEdgeSet(edgeCollection2, startRadius, endRadius, positions, radii);
	input2-&gt;isG2(true);
	input2-&gt;isRollingBallCorner(false);

	Ptr&lt;FilletFeature&gt; fillet2 = fillets-&gt;add(input2);
	if (!fillet2)
		return false;

	fillet2-&gt;deleteMe();

	<span style="color:blue">// Create chord-length fillet</span>
	Ptr&lt;ValueInput&gt; chordLength = ValueInput::createByReal(1.0);
	if (!chordLength)
		return false;

	Ptr&lt;FilletFeatureInput&gt; input3 = fillets-&gt;createInput(); 
	if (!input3)
		return false;

	input3-&gt;addChordLengthEdgeSet(edgeCollection1, chordLength, true);
	input3-&gt;isG2(false);
	input3-&gt;isRollingBallCorner(true); 

	fillets-&gt;add(input3);


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(FilletFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>