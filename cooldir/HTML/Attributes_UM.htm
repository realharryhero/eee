<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/Attributes_UM.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="27/4/2016">
    <meta name="user-comments" content="enable">
    <meta name="description" content="">
    <meta name="topicid" content="GUID-BAF017FE-10B8-4612-BDE2-0EF5D4C6F800">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Attributes</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
	<link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"/>
	<script type="text/javascript" src="/view/clientframework/client.js"><!--filler--></script> 
	<script>
	  // This turns on the display of the copyright notice which is not visible by default.
	  // Because the head is removed when used in the web help, this function will only exists
	  // when the chm help is being created.
	  window.onload = function() {
		copyrightElement = document.getElementById('CopyrightNotice');
		copyrightElement.style.display = 'block';
	  };
	</script>
</head>
<body>
<link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
	
<h2 class="api">Fusion 360 Attributes</h2>
<p Class="Normal">Attributes are something that is technically very simple but they enable the ability to create very sophisticated scripts and add-ins. An attribute is simply the ability to associated named values with a Fusion 360 entity. The named value is saved by Fusion 360 and can be retrieved at a later time, either from the entity it is on or by querying the design.  This doesn't seem like much but it provides that ability to do some interesting things.</p>

<p Class="Normal">There are two basic low-level capabilities this provides. The first is the ability to name an entity and find it later. The second is adding information to an entity. Here's a simple example that demonstrates both uses.  It's an add-in that provides fly-through capabilities. When first executed, the user is prompted to select a curve that the camera will follow along. They can also specify a couple of other settings. When they click the "Animate" button, the view is animated with the camera following along the selected curve.  Without attributes, the add-in requires the user to re-select the path curve, and change the other settings every time they run the command. With attributes, the selected curve can be "named" so when the command is run again it first looks to see if there is a previously selected path and uses it as the default path. Attributes are also used to save the value of the settings so they will become the default settings the next time the command is run.</p>

<div align="center"><img src="../images/Attributes1.png" border=0 align="middle" alt="Fly-through example"></div>
<br>

<p Class="Normal">Let's look in a little more detail at exactly what an attribute is and how you create, query, edit, and delete them.</p>

<h3 class="api">Creating Attributes</h3>
<p Class="Normal">All objects that support attributes have an "attributes" property that returns the Attributes collection associated with that entity. Initially this collection is empty, because by default entities do not have any attributes. To create a new attribute on that entity you use the add method of the Attributes object. Below is an example of adding an attribute where the user selects a face in the model and an attribute is added to the face and assigns the current area of the face as the value.</p>

<pre class="api-code">
<span style="color:blue"># Have a face selected.</span>
selectedFace = ui.selectEntity('Select a face', 'Faces').entity
	
<span style="color:blue"># Add an attribute to the face.</span>
selectedFace.attributes.add('ADSK-AttribSample', 'FaceArea', str(selectedFace.area))
	</pre>
	<br />
	
<p Class="Normal">There are three arguments needed when creating an attribute:</p>
<ol>
<li>
	<p Class="Normal"><b>groupName</b> - The first argument is the <i>group name</i>. This is a string that serves as a way to group all of the attributes you'll create. The group name serves two purposes.  First, it avoids duplicate name problems. All attributes on a specific entity must have a unique name.  For example, the name of the attribute above is 'FaceArea'. If attribute groups did not exist, when another add-in tries to create an attribute called 'FaceArea' on the same face, it will fail because there already is one with that name. Groups eliminate this problem because attribute names are only required to be unique within a group on that entity. Each add-in should use a different group name to allow different add-ins to create attributes with the same name on an entity. The most common use if for you to use the same group name for all attributes that your add-in creates. To ensure uniqueness, it's recommended you use some combination of your company and add-in name as your group name, i.e. "ADSK-FlyThrough".</p>

	<p Class="Normal">The second purpose that an attribute group serves is it provides an easy way to query and find the attributes associated with your add-in, regardless of what entity they're associated with. Querying for attributes is discussed in more detail below, but you can query based on group name which allows you to quickly access all of the attributes your add-in has created.</p>	
</li>
<li>
	<p Class="Normal"><b>name</b> - The second argument is the <i>name</i> of the attribute. This can be any string and is typically a name that makes sense to you and describes the data the attribute represents.  It's a similar thought process as to how you name variables in a program.</p>
</li>
<li>
	<p Class="Normal"><b>value</b> - The third argument is the value of the attribute.  An important thing to notice in the example above is that the value is being converted to a string.  Attribute values are always a string.  There are various libraries available in the different programming languages that let you convert from binary data to text and back again so it's possible to store any kind of data in an attribute.  By using JSON or XML formatting you can also store more complex data into a single attribute.</p>
</li>
</ol>
</p>
<h3 class="api">Getting Existing Attributes</h3>
<p Class="Normal">There are two ways to access existing attributes; from an entity and querying.</p>

<h4 class="api">Attributes from an Entity</h4>

<p Class="Normal">You can get any of the attributes that are associated with a specific entity. Getting attributes from an entity is demonstrated in the example below, where a face is selected and then the attribute that was added in the previous example is read and the value is displayed.  If the selected face doesn't have the specified attribute, a message is displayed to notify the user.</p>

<pre class="api-code">
<span style="color:blue"># Have a face selected.</span>
selectedFace = ui.selectEntity('Select a face', 'Faces').entity

<span style="color:blue"># Get the area attribute from the selected face.</span>
areaAttrib = selectedFace.attributes.itemByName('ADSK-AttribSample', 'FaceArea')

<span style="color:blue"># Check to see if an attribute was returned and display the value.</span>
if areaAttrib:
    ui.messageBox('Original area: ' + areaAttrib.value + ' cm^2')
else:
    ui.messageBox('The selected face does not have the attribute.')
</pre>
<br />

<p Class="Normal">Besides the itemByName property, the Attributes collection also supports the <i>item</i> method that lets you iterate through all of the attributes regardless of their group or name.  The Attributes collection also supports the <i>itemsByGroup</i> method that returns an array of all of the attributes on the entity that belongs to a particular group.  And finally it supports the groupNames property that returns an array of the names of the groups that exist on that entity.</p>

<h4 class="api">Querying for Attributes</h4>
<p Class="Normal">The above technique of getting an attribute from an entity works well when you know which entity contains the attributes you're interested in.  However, that's often not the case.  Even with this simple example, the model could have hundreds or even thousands of faces and the attribute could have been applied to any number of them.  You don't want to have to look to through every face in the design to see if any of them have a particular attribute.  A much more efficient way is to use the findAttributes method of the Design object.  This lets you query the entire design to quickly find any existing attributes.  This is demonstrated in the example below.</p>

<pre class="api-code">
<span style="color:blue"># Find all attributes with a certain name in the design.</span>
attribs = des.findAttributes('attributeSample', 'FaceArea')

<span style="color:blue"># Check the length of the returned array to see if any attributes were found.</span>
if len(attribs) > 0:
    ui.messageBox(str(len(attribs)) + ' FaceArea attributes were found.')
else:
    ui.messageBox('No attributes were found.')
</pre>
<br />

<p Class="Normal">The findAttributes method has two arguments, just like the itemByName method discussed earlier.  However, their use is more flexible with the findAttributes method. They can be used like above to specify the exact name of the group and attribute to find anything that exactly matches, but you can also just specify one or the other and use an empty string to get all.  For example if you call findAttributes using the code below, it will return all attributes that have the group name "attributeSample".</p>

<pre class="api-code">
attribs = des.findAttributes('attributeSample', '')
</pre>
<br />

<p Class="Normal">And the following will return all attributes named "FaceArea" regardless of their group name.</p>

<pre class="api-code">
attribs = des.findAttributes('', 'FaceArea')
</pre>
<br />

<p Class="Normal">In addition to exact matches, you can also use regular expressions to perform a search. To use a regular expression you prefix the expression string with "re:".  If you're unfamiliar with regular expressions they can be a bit intimidating at first but you can think of them as somewhat equivalent to a wild card search, but it's different in how you define the search string.  Regular expressions are more complicated than simple wild card searches but are also much more powerful. There are several good introductions to regular expressions on the web.  Here's one site entirely devoted to regular expressions, <a href="http://regexone.com">http://regexone.com</a>. When using a regular expression, the regular expression much match the full group or attribute name.</p>

<p Class="Normal">Here are a few examples of some common types of searches:<br />
&nbsp;&nbsp;&nbsp;"re:abc" - Matches if "abc" is the name being searched.<br/>
&nbsp;&nbsp;&nbsp;"re:abc.*" - Matches if "abc" is found at the beginning of the named being searched.  For example, it will match "abc123".<br/>
&nbsp;&nbsp;&nbsp;"re:.*abc" - Matches if "abc" is found at the end of the name being searched.  For example, it will match "Some test abc" but not "abcTest".<br/>
&nbsp;&nbsp;&nbsp;"re:.*abc.* - Match if "abc" is found anywhere in the name being searched.  For example, it will match "abc", "123abc456", and "123 456 abc".
</p>

<p Class="Normal">Below is a simple example of how a regular expression search is done. The assumption is that I have written several add-ins that create attributes and they all follow the recommended group naming described above. I have groups "ADSK-FlyThrough", "ADSK-MeshCut", "ADSK-AttribSample", "ADSK-SpurGear", etc. and now I want to find all of the attributes that any of my add-ins have created and delete all of them.  The obvious similarity between all of the attributes is the company portion of the group name. The code below uses a regular expression to find all of my attributes and deletes them.  It uses an empty string as the attribute name to match all names.</p>

<pre class="api-code">
<span style="color:blue"># Find all attributes whose group name begins with "ADSK".</span>
attribs = des.findAttributes('re:ADSK.*', '')

<span style="color:blue"># Delete all of the found attributes.</span>
for attrib in attribs:
    attrib.deleteMe()
</pre>
<br />

<h4 class="api">Getting the Associated Entity</h4>
<p Class="Normal">The findAttributes method returns an array of Attribute objects.  Frequently what you really want is the entity that the attribute is attached to.  This is where attributes serve as a mechanism of naming an entity so you can find it later.  If you have an Attribute object, you can get the entity it's attached to by using its "parent" property.</p> 

<p Class="Normal">Something that might seem a little odd at first is that it is possible to get an attribute whose parent entity no longer exists.  In that case, calling the parent property will return null. One example of where you can get an unattached attribute is in the case of B-Rep entities (faces, edges, and vertices of a model). When an attribute is created on a B-Rep entity it is never automatically deleted because the lifetime of that entity is unknown.  For example, if you add an attribute to an edge and then the edge is filleted, that edge is consumed and no longer exists in the model and the parent property of the attribute will return null. However, it's possible that the edge can come back in the future; the fillet can be deleted or suppressed and then the parent property of the attribute will return the edge. Because attributes can exist without an owner, it's important to always check the return value of the parent property to verify that you did get back an entity.</p>

<h3 class="api">Attribute Usage Examples</h3>
<p Class="Normal">How you apply the use of attributes is almost as varied as there are programs that use them. To better understand their potential, let's look closer at the previous fly through example add-in.</p>

<div align="center"><img src="../images/Attributes1.png" border=0 align="middle" alt="Fly-through example"></div>
<br>

<p Class="Normal">This add-in uses attributes for two purposes, attaching an ID to an entity to find it later (naming), and saving custom data.  The entity it wants to remember is the path curve that the user selected.  It does this by adding using the code below to add an attribute to the selected curve. The group name is "ADSK-FlyThrough", the attribute name is "pathCurve", and the value is an empty string because it's not needed in this case.  When the command is invoked, it used the findAttributes method to get the attribute, if it exists. If it exists it pre-populates the selection in the command dialog when the command is executed.
</p>

<pre class="api-code">
pathCurve.attributes.add('ADSK-FlyThrough', 'pathCurve', '')
</pre>
<br />

<p Class="Normal">Because the user can choose a different curve as the path, the old attribute also needs to be removed from the old curve.  The following is a small function that uses the functionality discussed previously to see if the attribute name already exists on the entity and if it does it does nothing but if it doesn't it deletes attributes of the same name of from any other entities and then adds the attribute to the new curve. 
</p>

<pre class="api-code">
<span style="color:blue"># Function that adds an attribute to an entity if it doesn't already exist,</span>
<span style="color:blue"># and it removes any attributes with the same name from any other entities</span>
<span style="color:blue"># so that only one entity can have an attribute with this name at a time.</span>
def addSingleName(design, entity, groupName, attributeName):
    attrib = entity.attributes.itemByName(groupName, attributeName)
    if not attrib:
        <span style="color:blue"># Get any existing attributes with this name and delete them.</span>
        oldAttribs = design.findAttributes(groupName, attributeName)
        for oldAttrib in oldAttribs:
            oldAttrib.deleteMe()

        <span style="color:blue"># Add the attribute to the specified entity.</span>
        entity.attributes.add(groupName, attributeName, '')
</pre>
<br />

<p Class="Normal">In addition to using attributes to name the path curve, the add-in also saves the other settings as attributes on the Design object. It saves them there instead of an entity because it's general information that's not associated with a particular entity. This is demonstrated in the code below where the up direction and smoothness values are saved.  Remember that attributes values are always strings so other values need to be converted to a string first.  If you call the add method and an attribute with the same name already exists, it results in updating the value of the existing attribute.
</p>

<pre class="api-code">
des.attributes.add('sampleCameraAnimate', 'upDir', upDir)
des.attributes.add('sampleCameraAnimate', 'smoothness', str(smoothness))
</pre>
<br />

<p Class="Normal">An alternative that can be more efficient in some cases is to combine all of your data into a string and save it in a single attribute. You can use JSON or XML or any other string based format to save the data.  The example below demonstrates concatenating the values together with a known delimiter.  The string can be parsed when it's read later to extract the individual values. Creating multiple attributes or using a single attribute are both viable options and choosing one over the other is primarily based on what's the most convenient for you specific case.  Keeping the data in separate attributes can make updating individual values easier, while combining it into a single attribute lets you easily store complex data and is more efficient.
</p>

<pre class="api-code">
attribValue = upDir + '|' + str(smoothness)
des.attributes.add('sampleCameraAnimate', 'settings', attribValue)
</pre>

<br />
<br />
<div id="CopyrightNotice" style="display:none;">
  <hr />
  <table width="100%" style="font-size:15">
	<tr>
	  <td align="left">
		&copy; Copyright 2017 Autodesk, Inc.
	  </td>
	  <td align="right">
		<a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(Attributes_UM)">Comment on this page.</a>
	  </td>
	</tr>
  </table>
</div>

</body>
</html>