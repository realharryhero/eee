<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/UserInterface_UM.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="10/3/2015">
    <meta name="user-comments" content="enable">
    <meta name="description" content="">
    <meta name="topicid" content="GUID-F31C76F0-8C74-4343-904C-68FDA9BB8B4C">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>User-Interface Customization</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
	<link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"/>
	<script type="text/javascript" src="/view/clientframework/client.js"><!--filler--></script> 
	<script>
	  // This turns on the display of the copyright notice which is not visible by default.
	  // Because the head is removed when used in the web help, this function will only exists
	  // when the chm help is being created.
	  window.onload = function() {
		copyrightElement = document.getElementById('CopyrightNotice');
		copyrightElement.style.display = 'block';
	  };
	</script>
</head>
<body>
<link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">

<h2 class="api">User-Interface Customization with Fusion 360's API</h2>
<p Class="Normal">When referring to customizing Fusion 360’s user-interface there are two separate concepts; modifying Fusion 360’s user interface to add access to your commands and creating custom dialogs for your commands.  This topic discusses customizing Fusion 360’s user interface.  The creation and use of command dialogs is discussed separately as part of the discussion on <a href="Commands_UM.htm">commands</a>.</p>

<p Class="Normal">When customizing Fusion 360’s user-interface it can be broken down into two main topics; structure and contents.</p>

<h3 class="api">Structure</h3>
<p Class="Normal">There are several elements that provide structure to how the commands are presented in the user-interface, as shown below.  Shown in red are the tool bars, shown in green are the tool bar panels, and in blue is the work space.  Each of these is described in more detail below.</p>

<div align="center"><img src="../images/UIElements1.png" align="middle" alt="Workspace Events"></div>
<br><br>

<h4 class="api">Toolbars</h4>
<p Class="Normal">A toolbar is a simple container for controls.  The controls can be simple command buttons or a drop-down that contains more controls.  Controls are described in more detail below.  There are several toolbars, but there are three that are always displayed and whose contents remain the same regardless of what’s happening in Fusion 360.  These are also the toolbars that are most often edited, usually by adding commands.  Each of these toolbars has a unique ID that can be used to access it.</p>

<p Class="Normal">The toolbar in the upper-left is commonly known as the QAT or <i>Quick Access Toolbar</i>.  Its ID is “QAT”.  It provides access to all the file related commands.  The toolbar in the upper-right provides access to the user account and help related commands and its ID is “QATRight”.  The toolbar at the center of the window at the bottom is known as the navigation toolbar and has all of the view related commands and its ID is “NavToolbar”.</p>

<p Class="Normal">All of the toolbars are accessible from the UserInterface object through the toolbars property which returns a Toolbars object.  You can use the itemById property on this object to get a specific toolbar.  The sample Python code below gets the Toolbar object that represents the QAT.</p>

<pre class="api-code">
app = adsk.core.Application.get()
ui = app.userInterface

qatToolbar = ui.toolbars.itemById('QAT')
</pre>
<br />

<h4 class="api">Toolbar Panels</h4>
<p Class="Normal">The Toolbar panels are also a UI element that provides access to controls.  Toolbar panels provide access to a larger set of commands in a more organized way than a toolbar and the commands available also dynamically change based on the current active workspace.  In the picture above, the MODEL workspace is selected and the toolbar panels that contain commands appropriate for the MODEL workspace are shown.</p>


<p Class="Normal">Each toolbar panel consists of two parts; the panel and a drop-down.  This is illustrated in the picture below where the ASSEMBLE panel is outlined in red and its drop-down is outlined in yellow.</p>

<div align="center"><img src="../images/UIToolbarPanels1.png" align="middle" alt="Toolbar Panels"></div>
<br><br>

<p Class="Normal">The panel provides a top-level shortcut to any of the commands in the drop-down.  The user controls which commands from the drop-down are shown in the panel by using the “Remove from toolbar” and “Add to toolbar” buttons to the right of the command, as shown below.</p>

<div align="center"><img src="../images/UIToolbarPanels2.png" align="middle" alt="Toolbar Panels"></div>
<br><br>

<p Class="Normal">There are two ways to access toolbar panels through the API; directly from the UserInterfaceObject to get all toolbar panels and from the WorkSpace object to get the subset of toolbar panels associated with it.  If you query for all of the toolbar panels you’ll find that the isVisible property of many of them is False meaning that they’re not currently visible in Fusion 360.  When the user changes the active workspace, Fusion 360 is turning the visibility of toolbar panels on and off so only those that apply to the active workspace are seen.</p>

<h3 class="api">Contents</h3>
<p Class="Normal">The content of the user-interface is defined using controls.</p>

<h4 class="api">Controls</h4>
<p Class="Normal">Both toolbars and toolbar panels act as containers for toolbar controls.  A toolbar control is the visible control that you see in the user interface.  There are four different types of controls; command, drop-down, split-button, and separator.  In the picture below, all of the buttons you see, both in the sketch toolbar panel and in the associated drop-down menu are command controls and will invoke a command when clicked.  The Rectangle, Circle, Arc, and Polygon items are drop-down controls because they result in the display of a drop-down menu when they’re clicked.  The divider line between the “Create Sketch” and “Line” commands is a separator control that is used to visually separate and structure the contents of a menu.</p>

<div align="center"><img src="../images/UIControlTypes.png" align="middle" alt="Control Types"></div>
<br><br>

<p Class="Normal">The control shown below is a split-button control.  It consists of a button with a small arrow to the right.  When the button is clicked the command displayed on the button is executed and when the arrow is clicked a drop-down appears allowing a choice of other commands.  Optionally, the last command picked in the drop-down can become the default command at the top level.</p>

<div align="center"><img src="../images/UISplitButton.png" align="middle" alt="Split Button"></div>
<br><br>

<p Class="Normal">As stated earlier, controls are the visible item you see in the user-interface.  However, a control itself isn’t very intelligent and primarily just serves as a place-holder within a toolbar.  All of the intelligence (text, icon, tool tip, etc.) that we see actually comes from an associated command definition.  Every control references a command definition to be able to display itself.</p>

<h4 class="api">Command Definitions</h4>
<p Class="Normal">Command definitions contain all of the information that defines how a control looks and behaves.  A command definition isn’t directly visible but is referenced by a control and the control uses the information in the command definition to display itself.  With toolbar panels you have a subset of commands from the drop-down also shown in the panel.  In this case these are two unique controls, (one in the panel and one in its drop-down), but both controls reference the same command definition and will behave the same.  If properties of the command definition are modified, those changes are automatically reflected in both of the controls.  For example, if the isEnabled property of the command definition is set to False, both of the controls will become disabled.  Also, when the user clicks a control, that action is passed onto the command definition and the commandCreated event of the command definition is fired to the creator of the command definition so they can do whatever action the command is supposed to do.</p>

<p Class="Normal">To create a new control you have to first create a command definition.  There is typically a one-to-one relationship between a command definition and what the user thinks of as a command.  There are three different types of command definitions, (button, check box, and list), and you choose the type based on how you want the command to be displayed in the user-interface. A button command definition results in the creation of a button, while a check box command definition results in a single check box.  The example below shows a drop-down control that contains four check box commands, (Layout Grid, Layout Grid Lock, Snap to Grid, and Incremental Move), and two button commands, (Grid Settings and Set Increments).</p>

<div align="center"><img src="../images/UIButtonCheckBox.png" align="middle" alt="Check Box Button"></div>
<br><br>

<p Class="Normal">The list command definition defines a command that will be displayed as a drop-down with an associated list of check boxes, radio buttons, or text items.  Below is an example of a check box list.  When “Effects” is clicked the drop-down is displayed and remains displayed while the user checks and unchecks items in the list.  The list remembers any changes so it will show the current state the next time it is displayed.</p>

<div align="center"><img src="../images/UIListCheckBox.png" align="middle" alt="Check Box List"></div>
<br><br>

<p Class="Normal">Below is an example of a radio button list.  When “Visual Style” is clicked the drop-down is displayed and the user can select one item in the list and then the drop-down is dismissed.  Like you expect with radio controls, only one item can be selected at a time.  The list remembers the selected item so the next time it is displayed it will show the currently selected item.</p>

<div align="center"><img src="../images/UIListRadio.png" align="middle" alt="Radio Button List"></div>
<br><br>

<p Class="Normal">Below is an example of a standard item list which consists of a list of text items.  When “Programming Resources” is clicked, the drop-down is displayed and the user can pick a single item from the list and then the drop-down is dismissed.  In the case of a standard item list, there’s no notion of a “selected” item or state so nothing is pre-selected when it’s initially displayed.</p>

<div align="center"><img src="../images/UIListText.png" align="middle" alt="Text List"></div>
<br><br>

<p Class="Normal">In the API there is a single type of CommandDefinition object but associated with each CommandDefinition is a ButtonControlDefinition, CheckBoxControlDefinition or ListControlDefinition object, all of which derive from the generic ControlDefinition class.  This is represented in the object model chart shown below, along with the ToolbarPanel, Toolbar, Workspace, and the various ToolbarControl objects discussed earlier.</p>

<div align="center"><img src="../images/UICommandDefinitionsModel.png" align="middle" alt="UI Object Model"></div>
<br><br>

<p Class="Normal">Below is some Python code that demonstrates using some of these objects by creating a button and adding it to the bottom of the ADD-INS panel of the MODEL workspace.  It also connects to the command created event of the button to get a notification when the button is clicked.  You can read more about commands in the <a href="Commands_UM.htm">Commands</a> topic.</p>

<pre class="api-code">
<span style="color:blue"># Get the UserInterface object and the CommandDefinitions collection.</span>
ui = app.userInterface
cmdDefs = ui.commandDefinitions

<span style="color:blue"># Create a button command definition.</span>
buttonExample = cmdDefs.addButtonDefinition('MyButtonDefId', 'Sample Button', 
                                            'Sample button tooltip',
                                            './/Resources//Sample')

<span style="color:blue"># Connect to the command created event.</span>
buttonExampleCreated = ButtonExampleCreatedEventHandler()
buttonExample.commandCreated.add(buttonExampleCreated)
handlers.append(buttonExampleCreated)

<span style="color:blue"># Get the ADD-INS panel in the model workspace.</span> 
addInsPanel = ui.allToolbarPanels.itemById('SolidScriptsAddinsPanel')

<span style="color:blue"># Add the button to the bottom.</span>
buttonControl = addInsPanel.controls.addCommand(buttonExample)

<span style="color:blue"># Make the button available in the panel.</span>
buttonControl.isPromotedByDefault = True
buttonControl.isPromoted = True
</pre>
<br />

<h4 class="api">Cleaning up Your Commands</h4>
<p Class="Normal">Typically, the user-interface is modified by adding commands when an add-in is loaded.  Fusion 360 does not remember any edits made to the user interface so everything is restored to its default state the next time Fusion 360 runs and the add-in will need to re-create its commands each time it starts up.  If an add-in is unloaded by the user during a session of Fusion 360, all of it's commands remain displayed for that session but will be dead because the add-in is no longer running to get the command created events.  To prevent this an add-in needs to clean up and delete any user-interface it has created.  It can do this in the stop function of the add-in, which Fusion 360 calls when the add-in is unloaded.  Both the command definitions and controls should be deleted to completely remove the user-interface elements.  This also allows the add-in to cleanly be re-loaded if the user should choose to do that.</p>

The Python code below demonstrates deleting the command definition and control that were created above.

<pre class="api-code">
<span style="color:blue"># Get the UserInterface object and the CommandDefinitions collection.</span>
ui = app.userInterface
cmdDefs = ui.commandDefinitions

<span style="color:blue"># Delete the button definition.</span>
buttonExample = ui.commandDefinitions.itemById('MyButtonDefId')
if buttonExample:
	buttonExample.deleteMe()
	
<span style="color:blue"># Get panel the control is in.</span>
addInsPanel = ui.allToolbarPanels.itemById('SolidScriptsAddinsPanel')

<span style="color:blue"># Get and delete the button control.</span>
buttonControl = addInsPanel.controls.itemById('MyButtonDefId')
if buttonControl:
	buttonControl.deleteMe()
</pre>
<br />

<h4 class="api">Icons for Commands</h4>
<p Class="Normal">Many of the controls support using an icon.  In Fusion 360, an icon is defined by a directory that contains all of the images for that command.  Each icon has its own directory of resource images.  Fusion 360 often needs two sizes of icons for a command so there are different sizes of the same image in the resource directory of a command. For example, when a command is added to a toolbar panel when running on Windows, the icon shown in the drop-down is 16x16 pixels, but if the user promotes it to the panel then it’s shown using a 32x32 pixel icon.  When running on a Mac that has a Retina display a 32x32 pixel image is used instead of the 16x16 pixel image and a 64x64 pixel image is used instead of the 32x32 pixel image.  This means to support both Windows and Mac, there are three sizes needed but because the naming is different for Windows and Mac there is a total of four files needed.  There is a naming standard that Fusion 360 expects so it knows which image is which.  The file names for the default image are:</p>

<ul>
<li><b>16x16.png</b> - 16x16 pixel image showing the standard image.</li>
<li><b>32x32.png</b> - 32x32 pixel image showing the standard image.</li>
<li><b>16x16@2x.png</b> - This is a copy of the 32x32.png file that is used on a retina display for the equivalent of the 16x16 standard image.</li>
<li><b>32x32@2x.png</b> - 64x64 pixel image which is used on a retina display for the equivalent of the 32x32 standard image.</li>

</ul>

<p Class="Normal">For each size, Fusion 360 also needs a disabled version of the image.  Typically just a gray version of the standard image.  The files for the disabled set of images are:</p>

<ul>
<li><b>16x16-disabled.png</b> - 16x16 pixel image showing the disabled image.</li>
<li><b>32x32-disabled.png</b> - 32x32 pixel image showing the disabled image.</li>
<li><b>16x16-disabled@2x.png</b> - This is a copy of the 32x32.png file that is used on a retina display for the equivalent of the 16x16 disabled image.</li>
<li><b>32x32-disabled@2x.png</b> - 64x64 pixel image which is used on a retina display for the equivalent of the 32x32 disabled image.</li>
</ul>

<p Class="Normal">Finally, Fusion 360 also needs a version of the image that’s used when the command is active.  In this case the button appears depressed and the background is a dark blue.  You can create a custom image for this case so that any dark colors don’t disappear into the background.  Frequently this is just a copy of the default image.  The names of the images to use for the dark background are:</p>

<ul>
<li><b>16x16-dark.png</b> - 16x16 pixel image showing the image to use with a dark background.</li>
<li><b>32x32-dark.png</b> - 32x32 pixel image showing the image to use with a dark background.</li>
<li><b>16x16-dark@2x.png</b> - This is a copy of the 32x32.png file that is used on a retina display for the equivalent of the 16x16 image to use with a dark background.</li>
<li><b>32x32-dark@2x.png</b> - 64x64 pixel image which is used on a retina display for the equivalent of the 32x32 image to use with a dark background.</li>
</ul>
</p>

<p Class="Normal">Below are the images used for the Fusion 360 extrude command as an example.</p>

<div align="center"><img src="../images/UI_ImageTypes.png" align="middle" alt="Extrude Image Example"></div>
<br><br>

<p Class="Normal">If you don’t provide a required image Fusion 360 will automatically create a placeholder image with the correct name and the picture of a question mark.  If you see a question mark for any of your commands it means you’re missing one of the required images and you’ll need to replace it with the correct image.</p>

<p Class="Normal">Resources are defined by specifying the path to the resource folder.  The path to resources is typically defined using a relative path but can also be a full path.  A relative path is relative to the .py or .js file.  For example, for the folder structure shown below, the relative path to the images for the Keyhole command in the SketchShapes add-in is “.//Resources//Keyhole” since the SketchShapes.py file is in the SketchShapes folder.</p>

<div align="center"><img src="../images/UIResourceDirectory.png" align="middle" alt="Resource Folder Example"></div>
<br><br>

<p Class="Normal">There is a directory for anything that requires an icon.  In the example above there is one directory for each command created by the SketchShapes add-in and each of the directories contains a set of the files described above.</p>

<h4 class="api">Positioning Your Controls</h4>
<p Class="Normal">Possibly the most difficult part of adding your commands to Fusion 360’s user-interface is understanding how to position the control where you want it.  To position your commands you’ll need the names of the toolbars, panels, and commands that you want to position relative to.  For example, if the goal is to insert a new command in the file drop-down of the QAT above the “3D Print” command as shown below.  To create the control in that location we need to know the name of the toolbar that represents the QAT, the name of the drop-down where the file commands are, and the name of the “3D print command”.</p>

<div align="center"><img src="../images/UIInsertCommand.png" align="middle" alt="Insert Control Example"></div>
<br><br>

<p Class="Normal">Here’s the code that accomplishes that.</p>

<pre class="api-code">
# Get the QAT toolbar.
qat = ui.toolbars.itemById('QAT')

# Get the drop-down that contains the file related commands.
fileDropDown = qat.controls.itemById('FileSubMenuCommand')

# Get the control for the 3D Print command.
print3DCmd = fileDropDown.controls.itemById('ThreeDprintCmdDef')

# Add a new button next to the 3D Print control.
buttonControl = fileDropDown.controls.addCommand(testCommandDef, 'testCmdDefControl', print3DCmd.index) 
</pre>
<br />

<p Class="Normal">You can see the names of the toolbar and controls are used to find them in the various collections.  To determine what the names of the various user-interface elements are you can use the sample program <a href="DumpControls.html">Write user interface to a file</a> which dumps out the current user-interface to a text file.  The result is in a tree structure and mirrors the structure of the user-interface.  Below is a trimmed down version of the file that shows the portions we need to accomplish the task above.  From this we see that the name of the QAT is “QAT”, the name of the file menu is “FileSubMenuCommand”, and the name of the 3D print command is “ThreeDprintCmdDef”.</p>

<pre class="api-code">
** Toolbars (7) **
   .
   .
   .
   QAT (10)____
      .
      .
      .
      Drop Down Control (27)____
         ID: FileSubMenuCommand
		 .
		 .
		 .
         Command Control____
            Control ID: ExportCommand
            isVisible: True
            index: 12
         Command Control____
            Control ID: ThreeDprintCmdDef
            isVisible: True
            index: 13
         Command Control____
            Control ID: SaveAsImageCommand
            isVisible: True
            index: 14
</pre>

<br />
<br />
<div id="CopyrightNotice" style="display:none;">
  <hr />
  <table width="100%" style="font-size:15">
	<tr>
	  <td align="left">
		&copy; Copyright 2017 Autodesk, Inc.
	  </td>
	  <td align="right">
		<a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(UserInterface_UM)">Comment on this page.</a>
	  </td>
	</tr>
  </table>
</div>
</body>
</html>