<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ToolbarControls.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="19/8/2014">
    <meta name="user-comments" content="enable">
    <meta name="description" content="ToolbarControls Object">
    <meta name="topicid" content="GUID-df24e158-40e0-4aed-9990-97c470935dbb">
    <meta name="language" content="ENU">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <title>ToolbarControls Object</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
            copyrightElement = document.getElementById('CopyrightNotice');
            copyrightElement.style.display = 'block';
          };
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">ToolbarControls Object
        </h1>
              Derived from: <a href="Base.htm">Base</a> Object
            <h2 class="api">
          Description
        </h2>ToolbarControls is a collection of ToolbarControl objects displayed in a toolbar or menu.<br /><br />Defined in namespace "adsk.core" and the header file is "Core/UserInterface/ToolbarControls.h".<h2 class="api">
            Methods
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_addCommand.htm">addCommand</a></td>
        <td class="api-list">Adds a button to the controls in the toolbar, panel, or drop-down. The ID of the created command control is inherited from the associated command definition.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_addDropDown.htm">addDropDown</a></td>
        <td class="api-list">Adds a drop-down to the controls in the toolbar, panel, or drop-down. When the drop-down is initially created it will be empty. you can get the associated ToolbarControls object from the DropDownControl to add additional controls to the drop-down.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_addSeparator.htm">addSeparator</a></td>
        <td class="api-list">Adds a separator to the controls in the toolbar, panel, or drop-down.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_addSplitButton.htm">addSplitButton</a></td>
        <td class="api-list">Adds a split button to the controls in a toolbar. A split button has two active areas that the user can click; the main button portion and the drop-down arrow. Clicking the main button, executes the displayed command. Clicking the drop-down displays the drop-down with additional commands.
 The split button itself does not fire any events, but the buttons within it will fire events to their associated command definitions.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_classType.htm">classType</a></td>
        <td class="api-list">Static function that all classes support that returns the type of the class as a string.  The returned string matches the string returned by the objectType property. For example if you have a reference to an object and you want to check if it's a SketchLine you can use myObject.objectType == fusion.SketchLine.classType().</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_item.htm">item</a></td>
        <td class="api-list">Returns the ToolbarControl at the specified index. When iterating by index, the controls are returned in the same order as they are shown in the user interface.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_itemById.htm">itemById</a></td>
        <td class="api-list">Returns the ToolbarControl at the specified ID.</td>
      </tr>
    </Table>
    <h2 class="api">
            Properties
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_count.htm">count</a></td>
        <td class="api-list">Gets the number of controls in the collection.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_isValid.htm">isValid</a></td>
        <td class="api-list">Indicates if this object is still valid, i.e. hasn't been deleted or some other action done to invalidate the reference.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="ToolbarControls_objectType.htm">objectType</a></td>
        <td class="api-list">Returns a string indicating the type of the object.</td>
      </tr>
    </Table>
    <h2 class="api">
            Accessed From
          </h2><a href="DropDownControl_controls.htm">DropDownControl.controls</a>, <a href="LinearMarkingMenu_controls.htm">LinearMarkingMenu.controls</a>, <a href="Toolbar_controls.htm">Toolbar.controls</a>, <a href="ToolbarPanel_controls.htm">ToolbarPanel.controls</a><h2 class="api">
            Samples
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="PaletteSample_Sample.htm">Palette Sample</a></td>
        <td class="api-list"><p>Demonstrates how to create a palette, how to dock and snap palettes and how Fusion communicates with the palette HTML. The sample is an add-in.  To use it, create a new Python or C++ add-in and replace the code with the code below. You also need to create an html file using the name and code below. The html file needs to be in the same folder as the py or dll file.</p>

<h3 class="api">palette.html</h3>
<pre class="api-code">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p id='p1'&gt;Click the button below or use the "Send info to HTML" command in the ADD-INS panel.&lt;/p&gt;
        &lt;button type='button' onclick='sendInfoToFusion()'&gt;Click to send info to Fusion&lt;/button&gt; 
        &lt;br /&gt;&lt;br /&gt;
    &lt;/body&gt;
    &lt;script&gt;
        function sendInfoToFusion(){
            var args = {
                arg1 : "Sample argument 1",
                arg2 : "Sample argument 2"
            };
            adsk.fusionSendData('send', JSON.stringify(args));
        }
        
        window.fusionJavaScriptHandler = {handle: function(action, data){
            try {
                if (action == 'send') {
					<span style="color:blue">// Update a paragraph with the data passed in.</span>
					document.getElementById('p1').innerHTML = data;
				}
				else if (action == 'debugger') {
                    debugger;
				}
				else {
					return 'Unexpected command type: ' + action;
                }
            } catch (e) {
                console.log(e);
                console.log('exception caught with command: ' + action + ', data: ' + data);
            }
            return 'OK';
        }};
    &lt;/script&gt;
&lt;/html&gt;
</pre></td>
      </tr>
      <tr>
        <td class="api-list"><a href="WriteUserInterfaceToFile_Sample.htm">Write user interface to a file</a></td>
        <td class="api-list">Writes out all of the controls in the Fusion UI to a specified text file. This is very useful when positioning your controls within existing Fusion toolbars and panels and positioning your command adjacent to an existing command.</td>
      </tr>
    </Table>
    <h2 class="api">
            Version
          </h2>
        Introduced in version August 2014<br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                Â© Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ToolbarControls%20Object%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>