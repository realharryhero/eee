<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ComponentSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Component Sample Sample">
    <meta name="topicid" content="GUID-9bb21a10-86f8-11e7-981a-6c0b84aa5a3f">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Component Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Component Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Component related functions<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback


def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface

        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)

        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent

        allOccs = rootComp.occurrences
        transform = adsk.core.Matrix3D.create()

        <span style="color:blue"># Create a component under root component</span>
        occ1 = allOccs.addNewComponent(transform)
        subComp1 = occ1.component
        print(subComp1.revisionId)

        <span style="color:blue"># Create a sketch in sub component 1</span>
        sketches1 = subComp1.sketches
        sketch1 = sketches1.add(rootComp.yZConstructionPlane)
        print(subComp1.revisionId)

        <span style="color:blue"># Get sketch lines</span>
        sketchLines = sketch1.sketchCurves.sketchLines

        <span style="color:blue"># Create sketch rectangle</span>
        startPoint = adsk.core.Point3D.create(-8.0, 0, 0)
        endPoint = adsk.core.Point3D.create(8.0, 8.0, 0)
        sketchLines.addTwoPointRectangle(startPoint, endPoint)
        print(subComp1.revisionId)

        <span style="color:blue"># Get the profile of the first sketch</span>
        prof1 = sketch1.profiles.item(0)

        <span style="color:blue"># Create an extrusion input</span>
        extrudes1 = subComp1.features.extrudeFeatures
        extInput1 = extrudes1.createInput(prof1, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)

        <span style="color:blue"># Define that the extent is a distance extent of 2 cm</span>
        distance1 = adsk.core.ValueInput.createByReal(2.0)
        <span style="color:blue"># Set the distance extent</span>
        extInput1.setDistanceExtent(False, distance1)
        <span style="color:blue"># Set the extrude type to be solid</span>
        extInput1.isSolid = True

        <span style="color:blue"># Create the extrusion</span>
        ext1 = extrudes1.add(extInput1)
        print(subComp1.revisionId)

    except:
        if ui:

            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Geometry/Matrix3D.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchCurve.h&gt;
#include &lt;Fusion/Sketch/SketchPoints.h&gt;
#include &lt;Fusion/Sketch/SketchPoint.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;
#include &lt;Fusion/Sketch/SketchLine.h&gt;
#include &lt;Fusion/Sketch/SketchFittedSplines.h&gt;
#include &lt;Fusion/Sketch/SketchFittedSpline.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Components/Occurrence.h&gt;
#include &lt;Fusion/Components/Occurrences.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;



using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; docs = app-&gt;documents();
	if (!docs)
		return false;

	<span style="color:blue">// Create a document.</span>
	Ptr&lt;Document&gt; doc = docs-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Design&gt; design = app-&gt;activeProduct();
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// Create a sub component under root component</span>
	Ptr&lt;Occurrences&gt; occs = rootComp-&gt;occurrences();
	if (!occs)
		return false;

	Ptr&lt;Matrix3D&gt; transform = adsk::core::Matrix3D::create();
	if (!transform)
		return false;

	Ptr&lt;Occurrence&gt; subOcc1 = occs-&gt;addNewComponent(transform);
	if (!subOcc1)
		return false;

	Ptr&lt;Component&gt; subComp1 = subOcc1-&gt;component();
	if (!subComp1)
		return false;

	std::string revisionId1 = subComp1-&gt;revisionId();

	<span style="color:blue">// Create sketch 1 in sub component 1</span>
	Ptr&lt;Sketches&gt; sketches1 = subComp1-&gt;sketches();
	if (!sketches1)
		return false;

	Ptr&lt;ConstructionPlane&gt; yzPlane = rootComp-&gt;yZConstructionPlane();
	if (!yzPlane)
		return false;

	Ptr&lt;Sketch&gt; sketch1 = sketches1-&gt;add(yzPlane);
	if (!sketch1)
		return false;

	<span style="color:blue">// Get sketch curves</span>
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch1-&gt;sketchCurves();
	if (!sketchCurves)
		return false;

	<span style="color:blue">// Get sketch lines</span>
	Ptr&lt;SketchLines&gt; sketchLines = sketchCurves-&gt;sketchLines();
	if (!sketchLines)
		return false;

	<span style="color:blue">// Create sketch rectangle</span>
	Ptr&lt;Point3D&gt; startPoint = Point3D::create(-8.0, 0, 0);

	Ptr&lt;Point3D&gt; endPoint = Point3D::create(8.0, 8.0, 0);
	sketchLines-&gt;addTwoPointRectangle(startPoint, endPoint);

	

	<span style="color:blue">// Get the profile</span>
	Ptr&lt;Profiles&gt; profs1 = sketch1-&gt;profiles();
	if (!profs1)
		return false;

	Ptr&lt;Profile&gt; prof1 = profs1-&gt;item(0);

	<span style="color:blue">// Create an extrusion input</span>
	Ptr&lt;Features&gt; feats1 = subComp1-&gt;features();
	if (!feats1)
		return false;

	Ptr&lt;ExtrudeFeatures&gt; extrudes1 = feats1-&gt;extrudeFeatures();
	if (!extrudes1)
		return false;

	Ptr&lt;ExtrudeFeatureInput&gt; extInput1 = extrudes1-&gt;createInput(prof1, FeatureOperations::NewBodyFeatureOperation);

	<span style="color:blue">// Define that the extent is a distance extent of 2 cm</span>
	Ptr&lt;ValueInput&gt; distance1 = ValueInput::createByReal(2.0);
	<span style="color:blue">// Set the distance extent</span>
	extInput1-&gt;setDistanceExtent(false, distance1);
	<span style="color:blue">// Set the extrude type to be solid</span>
	extInput1-&gt;isSolid(true);

	<span style="color:blue">// Create the extrusion</span>
	Ptr&lt;ExtrudeFeature&gt; ext1 = extrudes1-&gt;add(extInput1);
	if (!ext1)
		return false;

	std::string revisionId2 = subComp1-&gt;revisionId();


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ComponentSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>