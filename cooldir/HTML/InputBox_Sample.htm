<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/InputBox_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Use inputBox to get value and evaluateExpression to validate it Sample">
    <meta name="topicid" content="GUID-e7eaa59c-fde8-11e4-ba98-f8b156d7cd97">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Use inputBox to get value and evaluateExpression to validate it</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Use inputBox to get value and evaluateExpression to validate it API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Uses the UserInterface.inputBox function to get a string from the user and then validates that the strinng entered is a valid expression by using the UnitsManager.evaluateExpression function.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code"><span style="color:blue">#Author-</span>
<span style="color:blue">#Description-</span>
import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        design = app.activeProduct
        if not design:
            ui.messageBox('No active Fusion design', 'No Design')
            return

        <span style="color:blue"># Prompt the user for a string and validate it's valid.</span>
        isValid = False
        input = '1 in'  <span style="color:blue"># The initial default value.</span>
        while not isValid:
            <span style="color:blue"># Get a string from the user.</span>
            retVals = ui.inputBox('Enter a distance', 'Distance', input)
            if retVals[0]:
                (input, isCancelled) = retVals
            
            <span style="color:blue"># Exit the program if the dialog was cancelled.</span>
            if isCancelled:
                return
            
            <span style="color:blue"># Check that a valid length description was entered.</span>
            unitsMgr = design.unitsManager
            try:
                realValue = unitsMgr.evaluateExpression(input, unitsMgr.defaultLengthUnits)
                isValid = True
            except:
                <span style="color:blue"># Invalid expression so display an error and set the flag to allow them</span>
                <span style="color:blue"># to enter a value again.</span>
                ui.messageBox('"' + input + '" is not a valid length expression.', 'Invalid entry', 
                              adsk.core.MessageBoxButtonTypes.OKButtonType, 
                              adsk.core.MessageBoxIconTypes.CriticalIconType)
                isValid = False
        
        <span style="color:blue"># Use the value for something.</span>
        ui.messageBox('input: ' + input + ', result: ' + str(realValue))

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Core/Utils.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Fusion/FusionUnitsManager.h&gt;
#include &lt;sstream&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Design&gt; design = app-&gt;activeProduct();
	if (!design) {
		ui-&gt;messageBox("No active Fusion design", "No Design");
		return false;
	}

	<span style="color:blue">// Prompt the user for a string and validate it's valid.</span>
	bool isValid = false;
	std::string input = "1 in";  <span style="color:blue">// The initial default value.</span>
	double realValue = 0.0;
	while (!isValid) {
		<span style="color:blue">// Get a string from the user.</span>
		bool cancelled = false;
		input = ui-&gt;inputBox("Enter a distance", cancelled, "Distance", input);

		<span style="color:blue">// Exit the program if the dialog was cancelled.</span>
		if (cancelled) {
			adsk::terminate();
			return false;
		}

		<span style="color:blue">// Check that a valid length description was entered.</span>
		Ptr&lt;UnitsManager&gt; unitsMgr = design-&gt;unitsManager();
		if(!unitsMgr)
			return false;

		realValue = unitsMgr-&gt;evaluateExpression(input, unitsMgr-&gt;defaultLengthUnits());
		if(app-&gt;getLastError())
		{
			<span style="color:blue">// Invalid expression so display an error and set the flag to allow them</span>
			<span style="color:blue">// to enter a value again.</span>
			ui-&gt;messageBox(input + " is not a valid length expression.", "Invalid entry", 
				OKButtonType, CriticalIconType);
			isValid = false;
		}
		else
			isValid = true;
	}

	<span style="color:blue">// Use the value for something.</span>
	std::stringstream ss;
	ss &lt;&lt; "input: " &lt;&lt; input &lt;&lt; ", result: " &lt;&lt; realValue;
	ui-&gt;messageBox(ss.str());

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                Â© Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(InputBox%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>