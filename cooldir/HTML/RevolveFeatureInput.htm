<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/RevolveFeatureInput.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="19/8/2014">
    <meta name="user-comments" content="enable">
    <meta name="description" content="RevolveFeatureInput Object">
    <meta name="topicid" content="GUID-951b7e6e-d57e-4d74-a7d3-1b382bcd157f">
    <meta name="language" content="ENU">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <title>RevolveFeatureInput Object</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
            copyrightElement = document.getElementById('CopyrightNotice');
            copyrightElement.style.display = 'block';
          };
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">RevolveFeatureInput Object
        </h1>
              Derived from: <a href="Base.htm">Base</a> Object
            <h2 class="api">
          Description
        </h2>This class defines the methods and properties that pertain to the definition of a revolve  feature.<br /><br />Defined in namespace "adsk.fusion" and the header file is "Fusion/Features/RevolveFeatureInput.h".<h2 class="api">
            Methods
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_classType.htm">classType</a></td>
        <td class="api-list">Static function that all classes support that returns the type of the class as a string.  The returned string matches the string returned by the objectType property. For example if you have a reference to an object and you want to check if it's a SketchLine you can use myObject.objectType == fusion.SketchLine.classType().</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_setAngleExtent.htm">setAngleExtent</a></td>
        <td class="api-list">Defines the extent of the revolution to be at a specified angle. An angle and whether the extent is symmetric or only in one direction is specified. If it's not symmetric a positive or negative angle can be used to control the direction. If symmetric, the angle is the angle on one side so the entire angle of the revolution will be twice the specified angle.  Use an angle of 360 deg or 2 pi radians to create a full revolve.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_setOneSideToExtent.htm">setOneSideToExtent</a></td>
        <td class="api-list">Defines the extent of the revolve to be from the sketch or profile plane to the  specified "To" face.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_setTwoSideAngleExtent.htm">setTwoSideAngleExtent</a></td>
        <td class="api-list">Defines the angle of the revolve to be to applied to both sides of the profile  at the specified angles.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_setTwoSideToExtent.htm">setTwoSideToExtent</a></td>
        <td class="api-list">Defines the extents of the revolve to be from the sketch plane to specified  faces in both directions. If the matchShape argument is true, the faces to revolve to are extended to fully intersect the revolve.</td>
      </tr>
    </Table>
    <h2 class="api">
            Properties
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list" style="width:1%;">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_axis.htm">axis</a></td>
        <td class="api-list">Gets and sets the entity used to define the axis of revolution. The axis can be a sketch line, construction axis, or linear edge. If it is not in the same plane as the profile, it is projected onto the profile plane.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_creationOccurrence.htm">creationOccurrence</a></td>
        <td class="api-list">In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Revolve is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the Revolve) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_isSolid.htm">isSolid</a></td>
        <td class="api-list">Specifies if the revolution should be created as a solid or surface. If it's a surface then there aren't any end caps and it's open. This is initialized to true so a solid will be created if it's not changed.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_isValid.htm">isValid</a></td>
        <td class="api-list">Indicates if this object is still valid, i.e. hasn't been deleted or some other action done to invalidate the reference.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_objectType.htm">objectType</a></td>
        <td class="api-list">Returns a string indicating the type of the object.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_operation.htm">operation</a></td>
        <td class="api-list">Gets and sets the type of operation performed by the revolve.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_participantBodies.htm">participantBodies</a></td>
        <td class="api-list">Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection.
 If this property has not been set, the default behavior is that all bodies that are intersected by the  feature will participate.
 This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_profile.htm">profile</a></td>
        <td class="api-list">Gets and sets the profiles or planar faces used to define the shape of the revolve. This property can return or be set with a single Profile, a single planar face, or  an ObjectCollection consisting of multiple profiles and planar faces. When an  ObjectCollection is used all of the profiles and faces must be co-planar. This property returns null in the case where the feature is non-parametric.
 To create a surface (non-solid) revolution, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. The isSolid property of the RevolveFeatureInput property must also be False.</td>
      </tr>
      <tr>
        <td class="api-list"><a href="RevolveFeatureInput_targetBaseFeature.htm">targetBaseFeature</a></td>
        <td class="api-list">When creating a feature that is owned by a base feature, set this property to the  base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature.
 Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an "edit" state to be able to add any additional items to it.</td>
      </tr>
    </Table>
    <h2 class="api">
            Accessed From
          </h2><a href="RevolveFeatures_createInput.htm">RevolveFeatures.createInput</a><h2 class="api">
            Samples
          </h2>
    <Table class="api-list">
      <tr class="header">
        <td class="api-list">
                Name
              </td>
        <td class="api-list">
                Description
              </td>
      </tr>
      <tr>
        <td class="api-list"><a href="SimpleRevolveFeatureSample_Sample.htm">Simple Revolve Feature Sample</a></td>
        <td class="api-list">Creates a new revolve feature, resulting in a new component.</td>
      </tr>
    </Table>
    <h2 class="api">
            Version
          </h2>
        Introduced in version August 2014<br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                Â© Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(RevolveFeatureInput%20Object%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>