<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/AsBuiltJointSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="As-Built Joint Sample Sample">
    <meta name="topicid" content="GUID-60a37688-4229-11e5-b9a6-3417ebd41e19">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>As-Built Joint Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">As-Built Joint Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new As-Built Joint.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface

        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)

        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent

        <span style="color:blue"># Create two new components under root component</span>
        allOccs = rootComp.occurrences
        transform = adsk.core.Matrix3D.create()
        subOcc0 = allOccs.addNewComponent(transform)

        <span style="color:blue"># Create sketch 1 in sub component 1</span>
        subComp0 = subOcc0.component
        sketches0 = subComp0.sketches
        sketch0 = sketches0.add(subComp0.xZConstructionPlane)
        sketchCircles0 = sketch0.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        sketchCircles0.addByCenterRadius(centerPoint, 2.5)

        <span style="color:blue"># Get the profile defined by the circle</span>
        prof0 = sketch0.profiles.item(0)

        <span style="color:blue"># Create an extrude input and make sure it's in the new component</span>
        extrudes0 = subComp0.features.extrudeFeatures
        extInput0 = extrudes0.createInput(prof0, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)

        <span style="color:blue"># Set the extrude input</span>
        distance0 = adsk.core.ValueInput.createByString("5 mm")
        extInput0.setDistanceExtent(False, distance0)
        extInput0.isSolid = True

        <span style="color:blue"># Create the extrude</span>
        extrude0 = extrudes0.add(extInput0)

        <span style="color:blue"># Get the end face of the created extrude</span>
        endFaceOfExtrude0 = extrude0.endFaces.item(0)

        <span style="color:blue"># Create a construction plane for extrude 2</span>
        constructionPlanes_ = subComp0.constructionPlanes
        constructionPlaneInput = constructionPlanes_.createInput()
        constructionPlaneInput.setByOffset(endFaceOfExtrude0, adsk.core.ValueInput.createByString("20 mm"))
        constructionPlane = constructionPlanes_.add(constructionPlaneInput)
        constructionPlaneProxy = constructionPlane.createForAssemblyContext(subOcc0)

        <span style="color:blue"># Create sketch 2 in sub component 2</span>
        subOcc1 = allOccs.addNewComponent(transform)
        subComp1 = subOcc1.component
        sketches1 = subComp1.sketches
        sketch1 = sketches1.add(constructionPlaneProxy)
        sketchCircles1 = sketch1.sketchCurves.sketchCircles
        sketchCircles1.addByCenterRadius(centerPoint, 0.5)

        <span style="color:blue"># Get the profile defined by the circle</span>
        prof1 = sketch1.profiles.item(0)

        <span style="color:blue"># Create an extrude input and make sure it's in the new component</span>
        extrudes1 = subComp1.features.extrudeFeatures
        extInput1 = extrudes1.createInput(prof1, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)

        <span style="color:blue"># Set the extrude input</span>
        distance1 = adsk.core.ValueInput.createByString("50 mm")
        extInput1.setDistanceExtent(False, distance1)
        extInput1.isSolid = False

        <span style="color:blue"># Create the extrude</span>
        extrudes1.add(extInput1)

        <span style="color:blue"># Create the AsBuiltJointInput</span>
        asBuiltJoints_ = rootComp.asBuiltJoints
        asBuiltJointInput = asBuiltJoints_.createInput(subOcc0, subOcc1, None)

        <span style="color:blue"># Create the AsBuiltJoint</span>
        asBuiltJoints_.add(asBuiltJointInput)

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Application/Viewport.h&gt;
#include &lt;Core/Application/Camera.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/Geometry/Matrix3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/Construction/ConstructionPlanes.h&gt;
#include &lt;Fusion/Construction/ConstructionPlaneInput.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Components/AsBuiltJoints.h&gt;
#include &lt;Fusion/Components/AsBuiltJointInput.h&gt;
#include &lt;Fusion/Components/AsBuiltJoint.h&gt;
#include &lt;Fusion/Components/Occurrence.h&gt;
#include &lt;Fusion/Components/Occurrences.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchPoint.h&gt;
#include &lt;Fusion/Sketch/SketchPoints.h&gt;

using namespace adsk::core;
using namespace adsk::fusion;


Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	<span style="color:blue">// Create sub component 1 under root component</span>
	Ptr&lt;Occurrences&gt; occs = rootComp-&gt;occurrences();
	if(!occs)
		return false;
	Ptr&lt;Matrix3D&gt; transform = adsk::core::Matrix3D::create();
	if(!transform)
		return false;
	Ptr&lt;Occurrence&gt; subOcc0 = occs-&gt;addNewComponent(transform);
	if(!subOcc0)
		return false;

	<span style="color:blue">// Create sketch 1 in sub component 1</span>
	Ptr&lt;Component&gt; subComp0 = subOcc0-&gt;component();
	if(!subComp0)
		return false;
	Ptr&lt;Sketches&gt; sketches0 = subComp0-&gt;sketches();
	if(!sketches0)
		return false;
	Ptr&lt;ConstructionPlane&gt; xzPlane = rootComp-&gt;xZConstructionPlane();
	if(!xzPlane)
		return false;
	Ptr&lt;Sketch&gt; sketch0 = sketches0-&gt;add(xzPlane);
	if(!sketch0)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves0 = sketch0-&gt;sketchCurves();
	if(!sketchCurves0)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles0 = sketchCurves0-&gt;sketchCircles();
	if(!sketchCircles0)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if(!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; sketchCircle0 = sketchCircles0-&gt;addByCenterRadius(centerPoint, 2.5);
	if(!sketchCircle0)
		return false;

	<span style="color:blue">// Get the profile defined by the circle</span>
	Ptr&lt;Profiles&gt; profs0 = sketch0-&gt;profiles();
	if(!profs0)
		return false;
	Ptr&lt;Profile&gt; profile0 = profs0-&gt;item(0);
	if(!profile0)
		return false;

	<span style="color:blue">// Create an extrude input</span>
	Ptr&lt;Features&gt; feats0 = subComp0-&gt;features();
	if(!feats0)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes0 = feats0-&gt;extrudeFeatures();
	if(!extrudes0)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extInput0 = extrudes0-&gt;createInput(profile0, FeatureOperations::NewBodyFeatureOperation);
	if(!extInput0)
		return false;

	<span style="color:blue">// Set the extrude input</span>
	Ptr&lt;ValueInput&gt; distance0 = ValueInput::createByString("5 mm");
	if(!distance0)
		return false;
	extInput0-&gt;setDistanceExtent(false, distance0);
	extInput0-&gt;isSolid(true);

	<span style="color:blue">// Create the extrude</span>
	Ptr&lt;ExtrudeFeature&gt; ext = extrudes0-&gt;add(extInput0);
	if(!ext)
		return false;

	<span style="color:blue">// Get the end face of the created extrude</span>
	Ptr&lt;BRepFaces&gt; endFaces = ext-&gt;endFaces();
	if(!endFaces)
		return false;
	Ptr&lt;BRepFace&gt; endFace = endFaces-&gt;item(0);
	if(!endFace)
		return false;

	<span style="color:blue">// Create a construction plane for extrude 2</span>
	Ptr&lt;ConstructionPlanes&gt; ctorPlanes = subComp0-&gt;constructionPlanes();
	if(!ctorPlanes)
		return false;
	Ptr&lt;ConstructionPlaneInput&gt; ctorPlaneInput = ctorPlanes-&gt;createInput();
	if(!ctorPlaneInput)
		return false;
	ctorPlaneInput-&gt;setByOffset(endFace, adsk::core::ValueInput::createByString("20 mm"));
	Ptr&lt;ConstructionPlane&gt; ctorPlane = ctorPlanes-&gt;add(ctorPlaneInput);
	if(!ctorPlane)
		return false;
	Ptr&lt;ConstructionPlane&gt; ctorPlaneProxy = ctorPlane-&gt;createForAssemblyContext(subOcc0);
	if(!ctorPlaneProxy)
		return false;

	<span style="color:blue">// Create sub component 2 under root component</span>
	Ptr&lt;Occurrence&gt; subOcc1 = occs-&gt;addNewComponent(transform);
	if(!subOcc1)
		return false;

	<span style="color:blue">// Create sketch 2 in sub component 2</span>
	Ptr&lt;Component&gt; subComp1 = subOcc1-&gt;component();
	if(!subComp1)
		return false;
	Ptr&lt;Sketches&gt; sketches1 = subComp1-&gt;sketches();
	if(!sketches1)
		return false;
	Ptr&lt;Sketch&gt; sketch1 = sketches1-&gt;add(ctorPlaneProxy);
	if(!sketch1)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves1 = sketch1-&gt;sketchCurves();
	if(!sketchCurves1)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles1 = sketchCurves1-&gt;sketchCircles();
	if(!sketchCircles1)
		return false;
	Ptr&lt;SketchCircle&gt; sketchCircle1 = sketchCircles1-&gt;addByCenterRadius(centerPoint, 0.5);
	if(!sketchCircle1)
		return false;

	<span style="color:blue">// Get the profile defined by the circle</span>
	Ptr&lt;Profiles&gt; profs1 = sketch1-&gt;profiles();
	if(!profs1)
		return false;
	Ptr&lt;Profile&gt; profile1 = profs1-&gt;item(0);
	if(!profile1)
		return false;

	<span style="color:blue">// Create an extrude input</span>
	Ptr&lt;Features&gt; feats1 = subComp1-&gt;features();
	if(!feats1)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes1 = feats1-&gt;extrudeFeatures();
	if(!extrudes1)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extInput1 = extrudes1-&gt;createInput(profile1, FeatureOperations::NewBodyFeatureOperation);
	if(!extInput1)
		return false;

	<span style="color:blue">// Set the extrude input</span>
	Ptr&lt;ValueInput&gt; distance1 = ValueInput::createByString("50 mm");
	if(!distance1)
		return false;
	extInput1-&gt;setDistanceExtent(false, distance1);
	extInput1-&gt;isSolid(false);

	<span style="color:blue">// Create the extrude</span>
	Ptr&lt;ExtrudeFeature&gt; extrude1 = extrudes1-&gt;add(extInput1);
	if(!extrude1)
		return false;

	<span style="color:blue">// Create the AsBuiltJoint</span>
	Ptr&lt;AsBuiltJoints&gt; asBuiltJoints_ = rootComp-&gt;asBuiltJoints();
	if(!asBuiltJoints_)
		return false;
	Ptr&lt;AsBuiltJointInput&gt; asBuiltJointInput = asBuiltJoints_-&gt;createInput(subOcc0, subOcc1, nullptr);
	if(!asBuiltJointInput)
		return false;
	Ptr&lt;AsBuiltJoint&gt; asBuiltJoint = asBuiltJoints_-&gt;add(asBuiltJointInput);
	if(!asBuiltJoint)
		return false;

	<span style="color:blue">// Fit to window</span>
	Ptr&lt;Viewport&gt; viewPort = app-&gt;activeViewport();
	if(!viewPort)
		return false;
	Ptr&lt;Camera&gt; cam = viewPort-&gt;camera();
	if(!cam)
		return false;
	cam-&gt;isFitView(true);
	viewPort-&gt;camera(cam);


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(AsBuiltJointSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>