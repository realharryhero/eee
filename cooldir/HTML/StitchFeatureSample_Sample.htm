<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/StitchFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Stitch Feature API Sample Sample">
    <meta name="topicid" content="GUID-c5193a7a-6c41-4b47-bac3-f3e810ef9146">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Stitch Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Stitch Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new stitch feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        
        <span style="color:blue"># Create a document</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
        
        design = app.activeProduct

        <span style="color:blue"># Get the root component of the active design.</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create two sketch lines on the xz plane.</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        sketchLines = sketch.sketchCurves.sketchLines
        startPoint = adsk.core.Point3D.create(0, 0, 0)
        endPoint = adsk.core.Point3D.create(1, 0, 0)
        sketchLine = sketchLines.addByTwoPoints(startPoint, endPoint)
        endPoint2 = adsk.core.Point3D.create(0, 1, 0)
        sketchLine2 = sketchLines.addByTwoPoints(startPoint, endPoint2)
        
        <span style="color:blue"># Create surface one with ExtrudeFeature.</span>
        features = rootComp.features
        extrudeFeatures = features.extrudeFeatures
        openProfile = rootComp.createOpenProfile(sketchLine)
        extrudeFeatureInput = extrudeFeatures.createInput(openProfile, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        extrudeFeatureInput.isSolid = False
        extrudeFeatureInput.setDistanceExtent(False, adsk.core.ValueInput.createByReal(1.0))
        extrudeFeature = extrudeFeatures.add(extrudeFeatureInput)
        
        <span style="color:blue"># Create surface two with ExtrudeFeature.</span>
        openProfile2 = rootComp.createOpenProfile(sketchLine2)        
        extrudeFeatureInput2 = extrudeFeatures.createInput(openProfile2, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        extrudeFeatureInput2.isSolid = False
        extrudeFeatureInput2.setDistanceExtent(False, adsk.core.ValueInput.createByReal(1.0))
        extrudeFeature2 = extrudeFeatures.add(extrudeFeatureInput2)
        
        <span style="color:blue"># Get surface bodies and add them to object collection.</span>
        surface = extrudeFeature.bodies.item(0)
        surface2 = extrudeFeature2.bodies.item(0)
        surfaces = adsk.core.ObjectCollection.create()
        surfaces.add(surface)
        surfaces.add(surface2)
        
        <span style="color:blue"># Define tolerance with 1 cm.</span>
        tolerance = adsk.core.ValueInput.createByReal(1.0)
        
        <span style="color:blue"># Create a stitch input to be able to define the input needed for an stitch.</span>
        stitches = features.stitchFeatures
        stitchInput = stitches.createInput(surfaces, tolerance, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Create a stitch feature.</span>
        stitch = stitches.add(stitchInput)
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/StitchFeatures.h&gt;
#include &lt;Fusion/Features/StitchFeatureInput.h&gt;
#include &lt;Fusion/Features/StitchFeature.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;
#include &lt;Fusion/Sketch/SketchLine.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design.</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	<span style="color:blue">// Create sketch circle on the xz plane.</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if(!sketches)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
	if(!sketch)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if(!sketchCurves)
		return false;
	Ptr&lt;SketchLines&gt; sketchLines = sketchCurves-&gt;sketchLines();
	if (!sketchLines)
		return false;
	Ptr&lt;Point3D&gt; startPoint = Point3D::create(0, 0, 0);
	Ptr&lt;Point3D&gt; endPoint = Point3D::create(1.0, 0, 0);
	Ptr&lt;SketchLine&gt; sketchLine = sketchLines-&gt;addByTwoPoints(startPoint, endPoint);
	Ptr&lt;Point3D&gt; endPoint2 = Point3D::create(0, 1.0, 0);
	Ptr&lt;SketchLine&gt; sketchLine2 = sketchLines-&gt;addByTwoPoints(startPoint, endPoint2);

	<span style="color:blue">// Create a open profile.</span>
	Ptr&lt;Profile&gt; openProfile = rootComp-&gt;createOpenProfile(sketchLine);
	Ptr&lt;Profile&gt; openProfile2 = rootComp-&gt;createOpenProfile(sketchLine2);

	<span style="color:blue">// Create an extrusion input.</span>
	Ptr&lt;Features&gt; features = rootComp-&gt;features();
	if (!features)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes = features-&gt;extrudeFeatures();
	if (!extrudes)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extrudeInput = extrudes-&gt;createInput(openProfile, FeatureOperations::NewBodyFeatureOperation);
	if (!extrudeInput)
		return false;
	extrudeInput-&gt;isSolid(false);
	Ptr&lt;ExtrudeFeatureInput&gt; extrudeInput2 = extrudes-&gt;createInput(openProfile2, FeatureOperations::NewBodyFeatureOperation);
	if (!extrudeInput2)
		return false;
	extrudeInput2-&gt;isSolid(false);

	<span style="color:blue">// Define the extent.</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(1.0);
	extrudeInput-&gt;setDistanceExtent(false, distance);
	extrudeInput2-&gt;setDistanceExtent(false, distance);

	<span style="color:blue">// Create the extrusion.</span>
	Ptr&lt;ExtrudeFeature&gt; extrude = extrudes-&gt;add(extrudeInput);
	if (!extrude)
		return false;
	Ptr&lt;ExtrudeFeature&gt; extrude2 = extrudes-&gt;add(extrudeInput2);
	if (!extrude2)
		return false;
	Ptr&lt;BRepBodies&gt; bodies = extrude-&gt;bodies();
	if (!bodies)
		return false;
	Ptr&lt;BRepBody&gt; body = bodies-&gt;item(0);
	Ptr&lt;BRepBodies&gt; bodies2 = extrude2-&gt;bodies();
	if (!bodies2)
		return false;
	Ptr&lt;BRepBody&gt; body2 = bodies2-&gt;item(0);
	Ptr&lt;ObjectCollection&gt; surfaces = ObjectCollection::create();
	if (!surfaces)
		return false;
	surfaces-&gt;add(body);
	surfaces-&gt;add(body2);

	<span style="color:blue">// Define tolerance with 1 cm.</span>
	Ptr&lt;ValueInput&gt; tolerance = ValueInput::createByReal(1.0);

	<span style="color:blue">// Create a stitch input to be able to define the input needed for an stitch.</span>
	Ptr&lt;StitchFeatures&gt; stitches = features-&gt;stitchFeatures();
	if (!stitches)
		return false;
	Ptr&lt;StitchFeatureInput&gt; stitchInput = stitches-&gt;createInput(surfaces, tolerance, FeatureOperations::NewBodyFeatureOperation);

	<span style="color:blue">// Create a stitch feature.</span>
	stitches-&gt;add(stitchInput);


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(StitchFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>