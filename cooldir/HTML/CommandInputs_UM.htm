<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/CommandInputs_UM.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="10/3/2015">
    <meta name="user-comments" content="enable">
    <meta name="description" content="">
    <meta name="topicid" content="GUID-8B9041D5-75CC-4515-B4BB-4CF2CD5BC359">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Command Inputs</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
	<link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"/>
	<script type="text/javascript" src="/view/clientframework/client.js"><!--filler--></script> 
	<script>
	  // This turns on the display of the copyright notice which is not visible by default.
	  // Because the head is removed when used in the web help, this function will only exists
	  // when the chm help is being created.
	  window.onload = function() {
		copyrightElement = document.getElementById('CopyrightNotice');
		copyrightElement.style.display = 'block';
	  };
	</script>
</head>
<body>
<link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">

<h2 class="api">Command Inputs</h2>

<ul>
<li><a href="#AngleValueCommandInput">AngleValueCommandInput</a></li>
<li><a href="#BoolValueCommandInput">BoolValueCommandInput</a></li>
<li><a href="#ButtonRowCommandInput">ButtonRowCommandInput</a></li>
<li><a href="#DirectionCommandInput">DirectionCommandInput</a></li>
<li><a href="#DistanceValueCommandInput">DistanceValueCommandInput</a></li>
<li><a href="#DropDownCommandInput">DropDownCommandInput</a></li>
<li><a href="#FloatSlider">FloatSliderCommandInput and FloatSliderListCommandInput</a></li>
<li><a href="#FloatSpinnerCommandInput">FloatSpinnerCommandInput</a></li>
<li><a href="#GroupCommandInput">GroupCommandInput</a></li>
<li><a href="#ImageCommandInput">ImageCommandInput</a></li>
<li><a href="#IntegerSlider">IntegerSliderCommandInput and IntegerSliderListCommandInput</a></li>
<li><a href="#IntegerSpinnerCommandInput">IntegerSpinnerCommandInput</a></li>
<li><a href="#RadioButtonGroupCommandInput">RadioButtonGroupCommandInput</a></li>
<li><a href="#SelectionCommandInput">SelectionCommandInput</a></li>
<li><a href="#StringValueCommandInput">StringValueCommandInput</a></li>
<li><a href="#TabCommandInput">TabCommandInput</a></li>
<li><a href="#TableCommandInput">TableCommandInput</a></li>
<li><a href="#TextBoxCommandInput">TextBoxCommandInput</a></li>
<li><a href="#ValueCommandInput">ValueCommandInput</a></li>
</ul>

<p Class="Normal">Command inputs are used in command dialogs to get input from the user.  Simple commands don't always need a command dialog and if they do require some input can gather the input in other ways. For example, a message box can be used to get a yes/no answer to a question, but most commands do need to get additional input from the user before they can perform whatever actions they do. An important part of Fusion 360’s command machinery is the support for getting inputs of various types from the user. This can be seen in most of Fusion 360’s commands. For example, when the Loft command is run, the dialog below is displayed to gather the required input.</p>

<div align="center"><img src="../images/Commands1.png" align="middle" alt="Example Command"></div>
<br><br>

<p Class="Normal">A command dialog consists of a list of command inputs. In the case of the loft command there is a selection input to select the profiles, two Boolean inputs; one for chain selection and one to specify if the result will be closed, and a drop-down input to get the operation type. Fusion 360 supports many different types of command inputs and the API currently supports a subset of these that you can use in your commands. Support for additional input types will continue to be added in future releases.</p>

<p Class="Normal">Below are descriptions of the different command inputs the API currently supports.</p>

<a name="AngleValueCommandInput"></a>
<h4 class="api">AngleValueCommandInput</h4>

<p Class="Normal">A <a href="AngleValueCommandInput.htm">AngleValueCommandInput</a> displays as a value input on the command dialog and also displays an widget in the graphics window that the user can drag to set the value. This specific command input is commonly used by Fusion 360's commands.  For example, to specify the taper angle of an extrusion or the sweep angle of a revolve.</p>

<p Class="Normal">Command inputs that also have associated graphical widgets are usually initially set to be invisible or disabled and then their isVisible or isEnabled property is toggled once the user has specified other required input and you have enough information to define the location and direction of the graphical widget.  Making the input invisible or disabled will also hide the associated graphical widget.</p>

<div align="center"><img src="../images/CommandInputDistanceValue.png" align="middle" alt="DistanceValueCommandInput"></div>
<br><br>

<a name="BoolValueCommandInput"></a>
<h4 class="api">BoolValueCommandInput</h4>

<p Class="Normal">A <a href="BoolValueCommandInput.htm">BoolValueCommandInput</a> is used to get a True or False response from the user.  There are three visual styles that can be achieved depending on the arguments specified when the command input is created.  The three styles are shown below; a check box, a button that doesn’t change state but can be clicked, and a button that changes state between pressed and unpressed.</p>

<div align="center"><img src="../images/CommandInputBool.png" align="middle" alt="BoolValueCommandInput"></div>
<br><br>

<a name="ButtonRowCommandInput"></a>
<h4 class="api">ButtonRowCommandInput</h4>

<p Class="Normal">A <a href="ButtonRowCommandInput.htm">ButtonRowCommandInput</a> displays a row of buttons, where the user can choose one or more.  In the first example below, the isMultiSelectEnabled property is true, allowing the user to select more than one button.  In the second example it is false so only one button can be selected.  In the second case, selecting another button deselects the currently selected button.</p>

<div align="center"><img src="../images/CommandInputButtonRow.png" align="middle" alt="ButtonRowCommandInput"></div>
<br><br>

<a name="DirectionCommandInput"></a>
<h4 class="api">DirectionCommandInput</h4>

<p Class="Normal">A <a href="DirectionCommandInput.htm">DirectionCommandInput</a> displays as a button on the command dialog and also displays an arrow in the graphics window that the user can change the direction of.  This is used to let the user choose a positive or negative direction.</p>

<p Class="Normal">Command inputs that also have associated graphical widgets are usually initially set to be invisible and then their isVisible property is toggled once the user has specified other required input and you have enough information to define the location and direction of the graphical widget.</p>

<div align="center"><img src="../images/CommandInputDirection.png" align="middle" alt="DirectionCommandInput"></div>
<br><br>

<a name="DistanceValueCommandInput"></a>
<h4 class="api">DistanceValueCommandInput</h4>

<p Class="Normal">A <a href="DistanceValueCommandInput.htm">DistanceValueCommandInput</a> displays as a value input on the command dialog and also displays an arrow in the graphics window that the user can drag to set the value. This specific command input is very commonly used by Fusion 360's commands.  For example, to specify the depth of an extrusion or the offset distance of a construction plane.</p>

<p Class="Normal">Command inputs that also have associated graphical widgets are usually initially set to be invisible or disabled and then their isVisible or isEnabled property is toggled once the user has specified other required input and you have enough information to define the location and direction of the graphical widget.  Making the input invisible or disabled will also hide the associated graphical widget.</p>

<div align="center"><img src="../images/CommandInputDistanceValue.png" align="middle" alt="DistanceValueCommandInput"></div>
<br><br>

<a name="DropDownCommandInput"></a>
<h4 class="api">DropDownCommandInput</h4>

<p Class="Normal">A <a href="DrowDownCommandInput.htm">DrowDownCommandInput</a> is used to get a choice of zero or more selections from a user.  Depending on settings and the style of drop-down, the user can select multiple items or may be restricted to selecting a single item from the list.  There are four styles of drop down inputs, which are each shown below.

<ol>
<li>
<p Class="Normal">The first drop down style displays a list with check boxes where the user can check and uncheck any combination of items in the list.  This is defined by setting the drop down style to DropDownStyles.CheckBoxDropDownStyle. No icons are used for this style.</p>

<div align="center"><img src="../images/CommandInputDropDownCheckbox.png" align="middle" alt="DropDownCommandInput"></div>
</li>
<br><br>

<li>
<p Class="Normal">The second drop down style displays a list of items with an icon where the user can select one item from the list and the selected item is shown.  This is defined by setting the drop down style to DropDownStyles.LabeledIconDropDownStyle and specifying an icon for each item in the list.</p>

<div align="center"><img src="../images/CommandInputDropDownLabeledIcons.png" align="middle" alt="Labeled Icons"></div>
<br><br>

<p Class="Normal">Fusion 360 uses this type of control in many of its commands as can be seen here in the Extrude command dialog where the Direction, Operation, and Extents are all inputs of this type.</p>

<div align="center"><img src="../images/ExtrudeCommandInputExample.png" align="middle" alt="Labeled Icons Exmaple"></div>
<br><br>
<p Class="Normal">There is also a variation of this type of drop down where radio button is displayed instead of an icon.  This happens if you don't define an icon for an item in the list.</p>

<div align="center"><img src="../images/CommandInputDropDownRadio.png" align="middle" alt="Radio Buttons Drop-Down"></div>
</li>
<br><br>

<li>
<p Class="Normal">The third drop down style displays a list of items as text only.  This is defined by setting the drop down style to DropDownStyles.TextListDropDownStyle.  No icons are used for this style. This style of drop down is useful when displaying a dynamic list where the contents can change.  For example, Fusion 360 uses this to get the font selection in the Text command when placing text in a sketch. </p>

<div align="center"><img src="../images/CommandInputDropDownTextList.png" align="middle" alt="Text List"></div>
</li>
<br>

</p>
</ol>

<a name="FloatSlider"></a>
<h4 class="api">FloatSliderCommandInput and FloatSliderListCommandInput</h4>

<p Class="Normal">The <a href="FloatSliderCommandInput.htm">FloatSliderCommandInput</a> and the <a href="FloatSliderListCommandInput.htm">FloatSliderListCommandInput</a> are used to get one or two floating point numbers within a defined range from the user.  There are several options that change how it is displayed and how it behaves.  The various options are illustrated in the picture below; a single slider with a value spin control, text instead of the spin control, and two sliders to define a value range.  The FloatSliderListCommandInput defines a list of valid values so that the slider can only select one of the pre-defined values.</p>

<div align="center"><img src="../images/CommandInputFloatSlider.png" align="middle" alt="FloatSliderCommandInput"></div>
<br><br>

<a name="FloatSpinnerCommandInput"></a>
<h4 class="api">FloatSpinnerCommandInput</h4>

<p Class="Normal">The <a href="FloatSpinnerCommandInput.htm">FloatSpinnerCommandInput</a> is similar to a value input except it has a "spinner" to the right of the edit field where the user can enter a value using the keyboard or they can click the up or down arrows to increment or decrement the value by a predefined amount.</p>

<div align="center"><img src="../images/CommandFloatSpinnerCommandInput.png" align="middle" alt="FloatSpinnerCommandInput"></div>
<br><br>

<a name="GroupCommandInput"></a>
<h4 class="api">GroupCommandInput</h4>

<p Class="Normal">The <a href="GroupCommandInput.htm">GroupCommandInput</a> allows you to group a set of command inputs.  The group can be expanded and collapsed by clicking the triangle to the left of the group label. The picture below contains two groups.  The first group, "Expanded Group", is expanded and contains two command inputs.  The second group, "Collapsed Group", is collapsed so it's command inputs are not visible.  This input can be useful in more complex dialogs to allow better organization where you have a lot of inputs. It is also particularly useful when you have inputs that are not commonly changed so you can put them into a collapsed group so that they're still available but don't complicate typical usage of your command.</p>

<div align="center"><img src="../images/CommandGroupCommandInput.png" align="middle" alt="GroupCommandInput"></div>
<br><br>

<a name="ImageCommandInput"></a>
<h4 class="api">ImageCommandInput</h4>

<p Class="Normal">The <a href="ImageCommandInput.htm">ImageCommandInput</a> allows you to display an image in the command dialog.  Images are in the png format and support transparent backgrouns.  They are displayed full size.  In the example below, no name has been defined so the label is not displayed. The isFullWidth property can also be used so that the image will be centered within the width of the dialog.</p>

<div align="center"><img src="../images/CommandImageCommandInput.png" align="middle" alt="ImageCommandInput"></div>
<br><br>

<a name="IntegerSlider"></a>
<h4 class="api">IntegerSliderCommandInput and IntegerSliderListCommandInput</h4>

<p Class="Normal">The <a href="IntegerSliderCommandInput.htm">IntegerSliderCommandInput</a> and the <a href="IntegerSliderListCommandInput.htm">IntegerSliderListCommandInput</a> are used to get one or two whole numbers within a defined range from the user.  There are several options that change how it is displayed and how it behaves.  The various options are illustrated in the picture below; a single slider with a value spin control, text instead of the spin control, and two sliders to define a value range.  The IntegerSliderListCommandInput defines a list of valid values so that the slider can only select one of the pre-defined values.</p>

<div align="center"><img src="../images/CommandInputIntegerSlider.png" align="middle" alt="IntegerSliderCommandInput"></div>
<br><br>

<a name="IntegerSpinnerCommandInput"></a>
<h4 class="api">IntegerSpinnerCommandInput</h4>

<p Class="Normal">The <a href="IntegerSpinnerCommandInput.htm">IntegerSpinnerCommandInput</a> is similar to a value input except it has a "spinner" to the right of the edit field where the user can enter a value using the keyboard or they can click the up or down arrows to increment or decrement the value by a predefined amount.</p>

<div align="center"><img src="../images/CommandIntegerSpinnerCommandInput.png" align="middle" alt="IntegerSpinnerCommandInput"></div>
<br><br>

<a name="RadioButtonGroupCommandInput"></a>
<h4 class="api">RadioButtonGroupCommandInput</h4>

<p Class="Normal">The <a href="RadioButtonGroupCommandInput.htm">RadioButtonGroupCommandInput</a> allows you to display a list of radio buttons that are all visible and grouped together.</p>

<div align="center"><img src="../images/CommandRadioButtonsGroupInput.png" align="middle" alt="RadioButtonGroupInput"></div>
<br><br>

<a name="SelectionCommandInput"></a>
<h4 class="api">SelectionCommandInput</h4>

<p Class="Normal">A <a href="SelectionCommandInput.htm">SelectionCommandInput</a> is used to get geometric selections from the user.  You can use filtering to define which types of entities are selectable and set limits on the number of entities that can be selected.</p>

<div align="center"><img src="../images/CommandInputSelection.png" align="middle" alt="SelectionCommandInput"></div>
<br><br>

<a name="StringValueCommandInput"></a>
<h4 class="api">StringValueCommandInput</h4>

<p Class="Normal">A <a href="StringValueCommandInput.htm">StringValueCommandInput</a> is used to get any string input from the user.  Any text can be entered and no validation is performed.</p>

<div align="center"><img src="../images/CommandInputString.png" align="middle" alt="StringValueCommandInput"></div>
<br><br>

<a name="TabCommandInput"></a>
<h4 class="api">TabCommandInput</h4>

<p Class="Normal">A <a href="TabCommandInput.htm">TabCommandInput</a> is used to provide additional grouping beyone what a group command input can provide.  With tabs the entire dialog is available on different tabs.  This allows you to provide many inputs without the dialog exceeding the height of the window and provides the opportunity to logically group your command inputs.  Each tab can contain all of the command inputs, including groups, as shown below.</p>

<div align="center"><img src="../images/CommandTabCommandInput.png" align="middle" alt="TabCommandInput"></div>
<br><br>

<a name="TableCommandInput"></a>
<h4 class="api">TableCommandInput</h4>

<p Class="Normal">A <a href="TableCommandInput.htm">TableCommandInput</a> is used to organize other command inputs within a row-column structure. A table command input is not a generic table like you might be used to where it typically contains text and occasionally other types of data.  A table command input is a table, but only contains other command inputs. It's best to think of it as just a way to structure command inputs on the dialog. Most of the other command inputs can be used in a table. However, selection and button row command inputs are not supported in a table. Below are some examples of where Fusion 360 commands use a table command input.</p>

<div align="center"><img src="../images/TableCommandInput1.png" align="middle" alt="TableCommandInput"></div>
<br><br>

<p Class="Normal">Looking in more detail at the Loft command dialog you can see there are two tables used. Looking more closely at the top table where profiles are specified we can see that there are currently two rows and three columns.  the cells in the first column ("Profile 1" and "Profile 2") each contain a StringValueInput object that is set to be read-only.  Using a read-only StringValueInput is the way to display simple text in a table.  The second and third colums of each row contain DropDownCommandInput objects so the user can re-order the profiles and define direction conditions. You can't assign a command input to more than one location in the table, so each command input much be unique.</p>  

<div align="center"><img src="../images/TableCommandInput2.png" align="middle" alt="TableCommandInput"></div>
<br><br>

<p Class="Normal">Besides the cells within the table, the TableCommandInput also has it's own toolbar which is displayed at the bottom of the table.  The toolbar is also a host for command inputs.  The Loft command has two BoolValueCommandInput objects in the toolbar to allow for adding and removing profiles from the list.</p>

<p Class="Normal">The workflow when working with a table command input is to create the table using the CommandInputs object you get from the command, just like you would any other command input.  The table will be positioned in the order it was created relative to the other inputs on the dialog.  At any time, during the create or in reaction to the event when inputs are changed you can create the command input you want to place in the table.  You also create this using the CommandInputs object you get from the command.  Then you use the addCommandInput method of the TableCommandInput object to add the command input to the table.  As a result of adding it to the table it won't be shown outside of the table in the dialog.  You can also use the addToolbarCommandInput to add the input to the table's toolbar.</p>

<p Class="Normal">Below is some example Python code that illustrates creating a table, adding a button to the table's toolbar and adding a StringValueInput and a DropDownCommandInput to the table.  Similar code would exist in the inputChanged event of the command where additional rows could be added to the table.</p>

<pre class="api-code">
<span style="color:blue"># Create the table, defining the number of columns and their relative widths.</span>
table = inputs.addTableCommandInput('sampleTable', 'Table', 2, '1:1')

<span style="color:blue"># Define some of the table properties.</span>
table.minimumVisibleRows = 3
table.maximumVisibleRows = 6
table.columnSpacing = 1
table.rowSpacing = 1
table.tablePresentationStyle = adsk.core.TablePresentationStyles.itemBorderTablePresentationStyle
table.hasGrid = False

<span style="color:blue"># Create a button and add it to the toolbar of the table.</span>
button = inputs.addBoolValueInput('tbButton', 'Add Row', False, 'Resources/Add', False)
table.addToolbarCommandInput(button)

<span style="color:blue"># Create a string value input and add it to the first row and column.</span>
stringInput = inputs.addStringValueInput('string1', '', 'Sample Text')
stringInput.isReadOnly = True
table.addCommandInput(stringInput, 0, 0, 0, 0)

<span style="color:blue"># Create a drop-down input and add it to the first row and second column.</span>
dropDown = inputs.addDropDownCommandInput('dropList1', '', adsk.core.DropDownStyles.TextListDropDownStyle)
dropDown.listItems.add('Item 1', True, '')
dropDown.listItems.add('Item 2', False, '')
dropDown.listItems.add('Item 3', False, '')
table.addCommandInput(dropDown, 0, 1, 0, 0)
</pre>
<br />

<p Class="Normal">The code above, when used in the command created event, results in the command dialog shown below.</p>

<div align="center"><img src="../images/TableCommandInput3.png" align="middle" alt="TextBoxCommandInput"></div>
<br><br>

<a name="TextBoxCommandInput"></a>
<h4 class="api">TextBoxCommandInput</h4>

<p Class="Normal">A <a href="TextBoxCommandInput.htm">TextBoxCommandInput</a> is used to display formatted text and to allow the user to input longer text strings than would be practical using a StringValueCommandInput.  The picture below shows three different TextBoxCommandInput objects.</p>

<div align="center"><img src="../images/CommandInputTextBox.png" align="middle" alt="TextBoxCommandInput"></div>
<br><br>

<p Class="Normal">The first example has more than one line and is writable so the user can input text.  The second example is displaying text that is formatted using html elements.  The actual text used to define this text box is:</p>

<pre class="api-code">
‘&lt;b&gt;Notice:&lt;/b&gt; You are using Autodesk\'s &lt;a href="http://fusion360.autodesk.com"&gt;Fusion 360&lt;/a&gt;.'
</pre>
<br />

<p Class="Normal">The last example is using the same text as the previous one but it does a couple of things so there isn’t a title and the text is centered within the dialog.  First, it sets the isFullWidth property of the command input to true which turns off the title and only displays the text box portion.  The isFullWidth property is supported on all types of command inputs and is not limited to just text boxes.  To center the text within the dialog, additional html coding is used:</p>

<pre class="api-code">
‘&lt;div align="center"&gt;&lt;b&gt;Notice:&lt;/b&gt; You are using Autodesk\'s &lt;a href="http://fusion360.autodesk.com"&gt;Fusion 360&lt;/a&gt;&lt;/div&gt;.'
</pre>
<br />

<a name="ValueCommandInput"></a>
<h4 class="api">ValueCommandInput</h4>

<p Class="Normal">A <a href="ValueCommandInput.htm">ValueCommandInput</a> is used to get a value of a specific type from the user.  This is a value of a specific unit type (i.e. length, angle, etc.) and the value command input does all of the verification to make sure that the user enters a valid value.  If the value entered is not valid, the text automatically changes to a red color and the OK button is disabled.</p>

<div align="center"><img src="../images/CommandInputValue.png" align="middle" alt="Example Command"></div>
<br><br>

<p Class="Normal">A ValueCommandInput also provides a drop-down where previous values are shown and the user can use the "Mesaure" option to perform a measurement in the model to set the input value, as shown below.</p>

<div align="center"><img src="../images/CommandInputValueList.png" align="middle" alt="Example Command"></div>

<br />
<br />
<div id="CopyrightNotice" style="display:none;">
  <hr />
  <table width="100%" style="font-size:15">
	<tr>
	  <td align="left">
		&copy; Copyright 2017 Autodesk, Inc.
	  </td>
	  <td align="right">
		<a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(CommandInputs_UM)">Comment on this page.</a>
	  </td>
	</tr>
  </table>
</div>

</body>
</html>