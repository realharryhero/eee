<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/AnalyzeInterferenceSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Analyze Interference API Sample Sample">
    <meta name="topicid" content="GUID-{3749239A-22E9-4943-A63F-70C8F2C6CC1B}">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Analyze Interference API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Analyze Interference API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates analyzing the interference between components. This uses a direct modeling design because the ability to create bodies that represent the interference volume is only supported in a direct modeling design.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface

        <span style="color:blue"># Create a new document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)
        
        <span style="color:blue"># Set the design type to DirectDesignType (for non-parametric modelling)        </span>
        design.designType = adsk.fusion.DesignTypes.DirectDesignType

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create the first component - containing a box</span>
        occurrences = rootComp.occurrences
        matrix = adsk.core.Matrix3D.create()
        firstComponentOccurrence = occurrences.addNewComponent(matrix)                
        
        <span style="color:blue"># Create sketch</span>
        sketches = firstComponentOccurrence.component.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)        
        
        <span style="color:blue"># Create a rectangle</span>
        sketchLines = sketch.sketchCurves.sketchLines
        startPoint = adsk.core.Point3D.create(0, 0, 0)
        endPoint = adsk.core.Point3D.create(5, 5, 0)
        sketchLines.addTwoPointRectangle(startPoint, endPoint)
        
        <span style="color:blue"># Get the profile defined by the rectangle</span>
        prof = sketch.profiles.item(0)
        
        <span style="color:blue"># Create an extrusion input for the profile.</span>
        features = firstComponentOccurrence.component.features
        extrudes = features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent of the extrusion is a distance extent of 5 cm.</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(False, distance)
        
        <span style="color:blue"># Create the extrusion.</span>
        ext = extrudes.add(extInput)

        <span style="color:blue"># Create the second component - containing a box that overlaps the box in the first component</span>
        secondComponentOccurrence = occurrences.addNewComponent(matrix)                
        
        <span style="color:blue"># Create sketch</span>
        sketches = secondComponentOccurrence.component.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)        
        
        <span style="color:blue"># Create a rectangle</span>
        sketchLines = sketch.sketchCurves.sketchLines
        startPoint = adsk.core.Point3D.create(3, 3, 0)
        endPoint = adsk.core.Point3D.create(8, 8, 0)
        sketchLines.addTwoPointRectangle(startPoint, endPoint)
        <span style="color:blue"># Get the profile defined by the rectangle</span>
        prof = sketch.profiles.item(0)
        
        <span style="color:blue"># Create an extrusion input for the profile.</span>
        features = secondComponentOccurrence.component.features
        extrudes = features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent of the extrusion is a distance extent of 5 cm.</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(False, distance)
        
        <span style="color:blue"># Create the extrusion.</span>
        ext = extrudes.add(extInput)
        
        <span style="color:blue"># Create the third component - containing a cylinder that overlaps the box in the second component</span>
        thirdComponentOccurrence = occurrences.addNewComponent(matrix)                
        
        <span style="color:blue"># Create sketch</span>
        sketches = thirdComponentOccurrence.component.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)        
        
        <span style="color:blue"># Create a circle</span>
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(8, 8, 0)
        sketchCircles.addByCenterRadius(centerPoint, 2)
        
        <span style="color:blue"># Get the profile defined by the circle</span>
        prof = sketch.profiles.item(0)
        
        <span style="color:blue"># Create an extrusion input for the profile.</span>
        features = thirdComponentOccurrence.component.features
        extrudes = features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent of the extrusion is a distance extent of 5 cm.</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(False, distance)
        
        <span style="color:blue"># Create the extrusion.</span>
        ext = extrudes.add(extInput)    
        
        <span style="color:blue"># Create a collection of the components to check for interference</span>
        inputOccurrences = adsk.core.ObjectCollection.create()
        inputOccurrences.add(firstComponentOccurrence)
        inputOccurrences.add(secondComponentOccurrence)
        inputOccurrences.add(thirdComponentOccurrence)
        
        <span style="color:blue"># Create the interferenceInput object and run the analysis.</span>
        interferenceInput = design.createInterferenceInput(inputOccurrences)
        interferenceInput.areCoincidentFacesIncluded = False
        results = design.analyzeInterference(interferenceInput)    
        
        <span style="color:blue"># Create bodies for every intersection.  This is not supported in Parametric designs.</span>
        interferenceBodies = results.createBodies(True)
        
        <span style="color:blue"># Activate the Intersections component created by Fusion that stores the interference bodies</span>
        resultsOccurrence = occurrences.item(occurrences.count-1)
        resultsOccurrence.activate()
        
        <span style="color:blue"># Fit the view        </span>
        viewport = app.activeViewport
        viewport.fit()
        
        <span style="color:blue"># Report the results</span>
        bod = 0        
        for res in results:
            comp1Name = res.entityOne.parentComponent.name
            comp2Name = res.entityTwo.parentComponent.name
            bodyVolume = str(round(res.interferenceBody.volume, 2))
            interferenceBodies.item(bod).name = 'Interference between ' + comp1Name + ' & ' + comp2Name
            ui.messageBox('There is interference between ' + comp1Name + ' and ' + comp2Name + ' with a volume of ' + bodyVolume + ' cubic centimeters')
            bod += 1
        
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/CoreAll.h&gt;
#include &lt;Fusion/FusionAll.h&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
    Ptr&lt;Application&gt; app = Application::get();
    if (!app)
        return false;

    ui  = app-&gt;userInterface();

    <span style="color:blue">// Create a new document.</span>
    Ptr&lt;Documents&gt; documents = app-&gt;documents();
    if (!documents)
        return false;
    Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
    if (!doc)
        return false;

    Ptr&lt;Product&gt; product = app-&gt;activeProduct();
    if (!product)
        return false;

    Ptr&lt;Design&gt; design = product;
    if (!design)
        return false;

    <span style="color:blue">// Set the design type to DirectDesignType (for non-parametric modelling)        </span>
    design-&gt;designType(adsk::fusion::DesignTypes::DirectDesignType);

    <span style="color:blue">// Get the root component of the active design</span>
    Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
    if (!rootComp)
        return false;
        
    <span style="color:blue">// Create the first component - containing a box</span>
    Ptr&lt;Occurrences&gt; occurrences = rootComp-&gt;occurrences();
    if (!occurrences)
        return false;
    Ptr&lt;Matrix3D&gt; matrix = adsk::core::Matrix3D::create();
    if (!matrix)
        return false;
    Ptr&lt;Occurrence&gt; firstComponentOccurrence = occurrences-&gt;addNewComponent(matrix);
    if (!firstComponentOccurrence)
        return false;
        
    <span style="color:blue">// Create sketch</span>
    Ptr&lt;Sketches&gt; sketches = firstComponentOccurrence-&gt;component()-&gt;sketches();
    if (!sketches)
        return false;
    Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
    if (!sketch)
        return false;
        
    <span style="color:blue">// Create a rectangle</span>
    Ptr&lt;SketchLines&gt; sketchLines = sketch-&gt;sketchCurves()-&gt;sketchLines();
    if (!sketchLines)
        return false;
    Ptr&lt;Point3D&gt; startPoint = adsk::core::Point3D::create(0, 0, 0);
    if (!startPoint)
        return false;
    Ptr&lt;Point3D&gt; endPoint = adsk::core::Point3D::create(5, 5, 0);
    if (!endPoint)
        return false;
    sketchLines-&gt;addTwoPointRectangle(startPoint, endPoint);
        
    <span style="color:blue">// Get the profile defined by the rectangle</span>
    Ptr&lt;Profiles&gt; profiles = sketch-&gt;profiles();
    if (!profiles)
        return false;
    Ptr&lt;Profile&gt; prof = profiles-&gt;item(0);
    if (!prof)
        return false;
        
    <span style="color:blue">// Create an extrusion input for the profile.</span>
    Ptr&lt;Features&gt; features = firstComponentOccurrence-&gt;component()-&gt;features();
    if (!features)
        return false;
    Ptr&lt;ExtrudeFeatures&gt; extrudes = features-&gt;extrudeFeatures();
    if (!extrudes)
        return false;
    Ptr&lt;ExtrudeFeatureInput&gt; extInput = extrudes-&gt;createInput(prof, adsk::fusion::FeatureOperations::NewBodyFeatureOperation);
    if (!extInput)
        return false;
        
    <span style="color:blue">// Define that the extent of the extrusion is a distance extent of 5 cm.</span>
    Ptr&lt;ValueInput&gt; distance = adsk::core::ValueInput::createByReal(5);
    if (!distance)
        return false;
    extInput-&gt;setDistanceExtent(false, distance);
        
    <span style="color:blue">// Create the extrusion.</span>
    Ptr&lt;ExtrudeFeature&gt; ext = extrudes-&gt;add(extInput);
    if (!ext)
        return false;

    <span style="color:blue">// Create the second component - containing a box that overlaps the box in the first component</span>
    Ptr&lt;Occurrence&gt; secondComponentOccurrence = occurrences-&gt;addNewComponent(matrix);
    if (!secondComponentOccurrence)
        return false;
        
    <span style="color:blue">// Create sketch</span>
    sketches = secondComponentOccurrence-&gt;component()-&gt;sketches();
    sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
        
    <span style="color:blue">// Create a rectangle</span>
    sketchLines = sketch-&gt;sketchCurves()-&gt;sketchLines();
    startPoint = adsk::core::Point3D::create(3, 3, 0);
    endPoint = adsk::core::Point3D::create(8, 8, 0);
    sketchLines-&gt;addTwoPointRectangle(startPoint, endPoint);
        
    <span style="color:blue">// Get the profile defined by the rectangle</span>
    prof = sketch-&gt;profiles()-&gt;item(0);
        
    <span style="color:blue">// Create an extrusion input for the profile.</span>
    features = secondComponentOccurrence-&gt;component()-&gt;features();
    extrudes = features-&gt;extrudeFeatures();
    extInput = extrudes-&gt;createInput(prof, adsk::fusion::FeatureOperations::NewBodyFeatureOperation);
        
    <span style="color:blue">// Define that the extent of the extrusion is a distance extent of 5 cm.</span>
    distance = adsk::core::ValueInput::createByReal(5);
    extInput-&gt;setDistanceExtent(false, distance);
        
    <span style="color:blue">// Create the extrusion.</span>
    ext = extrudes-&gt;add(extInput);

    <span style="color:blue">// Create the third component - containing a cylinder that overlaps the box in the second component</span>
    Ptr&lt;Occurrence&gt; thirdComponentOccurrence = occurrences-&gt;addNewComponent(matrix);
    if (!thirdComponentOccurrence)
        return false;

    <span style="color:blue">// Create sketch</span>
    sketches = thirdComponentOccurrence-&gt;component()-&gt;sketches();
    sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
        
    <span style="color:blue">// Create a circle</span>
    Ptr&lt;SketchCircles&gt; sketchCircles = sketch-&gt;sketchCurves()-&gt;sketchCircles();
    if (!sketchCircles)
        return false;
    Ptr&lt;Point3D&gt; centerPoint = adsk::core::Point3D::create(8, 8, 0);
    if (!centerPoint)
        return false;
    sketchCircles-&gt;addByCenterRadius(centerPoint, 2);
        
    <span style="color:blue">// Get the profile defined by the circle</span>
    prof = sketch-&gt;profiles()-&gt;item(0);
        
    <span style="color:blue">// Create an extrusion input for the profile.</span>
    features = thirdComponentOccurrence-&gt;component()-&gt;features();
    extrudes = features-&gt;extrudeFeatures();
    extInput = extrudes-&gt;createInput(prof, adsk::fusion::FeatureOperations::NewBodyFeatureOperation);
        
    <span style="color:blue">// Define that the extent of the extrusion is a distance extent of 5 cm.</span>
    distance = adsk::core::ValueInput::createByReal(5);
    extInput-&gt;setDistanceExtent(false, distance);
        
    <span style="color:blue">// Create the extrusion.</span>
    ext = extrudes-&gt;add(extInput);

    <span style="color:blue">// Create a collection of the components to check for interference</span>
    Ptr&lt;ObjectCollection&gt; inputOccurrences = adsk::core::ObjectCollection::create();
    if (!inputOccurrences)
    return false;
    inputOccurrences-&gt;add(firstComponentOccurrence);
    inputOccurrences-&gt;add(secondComponentOccurrence);
    inputOccurrences-&gt;add(thirdComponentOccurrence);

    <span style="color:blue">// Create the interferenceInput object and run the analysis.</span>
    Ptr&lt;InterferenceInput&gt; interferenceInput = design-&gt;createInterferenceInput(inputOccurrences);
    if (!interferenceInput)
    return false;
    interferenceInput-&gt;areCoincidentFacesIncluded(false);
    Ptr&lt;InterferenceResults&gt; results = design-&gt;analyzeInterference(interferenceInput);
    if (!results)
    return false;

    <span style="color:blue">// Create bodies for every intersection.  This is not supported in Parametric designs.</span>
    Ptr&lt;ObjectCollection&gt; interferenceBodies = results-&gt;createBodies(true);
    if (!interferenceBodies)
    return false;

    Ptr&lt;Occurrence&gt; resultsOccurrence = occurrences-&gt;item(occurrences-&gt;count()-1);
    if (!resultsOccurrence)
    return false;
    resultsOccurrence-&gt;activate();

    <span style="color:blue">// Fit the view        </span>
    Ptr&lt;Viewport&gt; viewport = app-&gt;activeViewport();
    if (!viewport)
    return false;
    viewport-&gt;fit();

    <span style="color:blue">// Report the results</span>
    int bodCount = 0;
    for (Ptr&lt;InterferenceResult&gt; result : results) {
        Ptr&lt;BRepBody&gt;entOneBody = result-&gt;entityOne();
        if (!entOneBody)
            return false;
        std::string comp1Name = entOneBody-&gt;parentComponent()-&gt;name();

        Ptr&lt;BRepBody&gt;entTwoBody = result-&gt;entityTwo();
        if (!entTwoBody)
            return false;
        std::string comp2Name = entTwoBody-&gt;parentComponent()-&gt;name();

        double bodyVolume = result-&gt;interferenceBody()-&gt;volume();
        std::stringstream bodyVolumeString;
        bodyVolumeString &lt;&lt; std::setprecision(2) &lt;&lt; std::fixed &lt;&lt; bodyVolume;
            
        Ptr&lt;BRepBody&gt; interferenceBody = interferenceBodies-&gt;item(bodCount);
        if (!interferenceBody)
            return false;
        bodCount++;
        interferenceBody-&gt;name("Interference between " + comp1Name + " & " + comp2Name);
        ui-&gt;messageBox("There is interference between " + comp1Name + " and " + comp2Name + " with a volume of " + bodyVolumeString.str() + " cubic centimeters");
    }

    return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
    switch (reason)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(AnalyzeInterferenceSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>