<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/PatchFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Patch Feature API Sample Sample">
    <meta name="topicid" content="GUID-d8c3e02e-158e-11e6-a9a3-3417ebd41e19">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Patch Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Patch Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new patch feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        
        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design.</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create sketch</span>
        sketchesObj = rootComp.sketches
        sketch = sketchesObj.add(rootComp.xZConstructionPlane)
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        sketchCircles.addByCenterRadius(centerPoint, 3.0)
        sketchCircles.addByCenterRadius(centerPoint, 10.0)

        <span style="color:blue"># Get the profiles defined by the circles.</span>
        profile1 = sketch.profiles.item(0)
        profile2 = sketch.profiles.item(1)
        
        <span style="color:blue"># Get the inner and outer profile</span>
        areaPropertiesOfProfile1 = profile1.areaProperties()
        areaPropertiesOfProfile2 = profile2.areaProperties()
        areaOfProfile1 = areaPropertiesOfProfile1.area
        areaOfProfile2 = areaPropertiesOfProfile2.area

        outerProfile = profile1
        if areaOfProfile1 &lt; areaOfProfile2:
            outerProfile = profile2

        <span style="color:blue"># Create a extrusion based on the outer profile</span>
        extrudes = rootComp.features.extrudeFeatures
        extrudeDistance = adsk.core.ValueInput.createByString("1 cm")
        extrudeFeature = extrudes.addSimple(outerProfile, extrudeDistance, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)

        <span style="color:blue"># Get BrepEdge from inner loop on the end face of the extrusion</span>
        extrudeEndFace = extrudeFeature.endFaces.item(0)
        brepLoops = extrudeEndFace.loops
        innerLoop = brepLoops.item(0)
        if innerLoop.isOuter:
            innerLoop = brepLoops.item(1)
        brepEdges = innerLoop.edges
        brepEdge = brepEdges.item(0)

        <span style="color:blue"># Create the patch feature</span>
        patches = rootComp.features.patchFeatures
        patchInput = patches.createInput(brepEdge, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        patches.add(patchInput)

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/BRep/BRepLoops.h&gt;
#include &lt;Fusion/BRep/BRepLoop.h&gt;
#include &lt;Fusion/BRep/BRepEdges.h&gt;
#include &lt;Fusion/BRep/BRepEdge.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/PatchFeatures.h&gt;
#include &lt;Fusion/Features/PatchFeatureInput.h&gt;
#include &lt;Fusion/Features/PatchFeature.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Fusion/AreaProperties.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	<span style="color:blue">// Create a document</span>
	Ptr&lt;Documents&gt; docs = app-&gt;documents();
	if (!docs)
		return false;
	Ptr&lt;Document&gt; doc = docs-&gt;add(adsk::core::DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; activeProd = app-&gt;activeProduct();
	if (!activeProd)
		return false;

	Ptr&lt;Design&gt; design = activeProd;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// Create sketch.</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if (!sketches)
		return false;
	Ptr&lt;ConstructionPlane&gt; xzPlane = rootComp-&gt;xZConstructionPlane();
	if (!xzPlane)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(xzPlane);
	if (!sketch)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if (!sketchCurves)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles = sketchCurves-&gt;sketchCircles();
	if (!sketchCircles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if (!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; circle1 = sketchCircles-&gt;addByCenterRadius(centerPoint, 3.0);
	if (!circle1)
		return false;
	Ptr&lt;SketchCircle&gt; circle2 = sketchCircles-&gt;addByCenterRadius(centerPoint, 10.0);
	if (!circle2)
		return false;

	<span style="color:blue">// Get the profiles defined by the circles</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if (!profs)
		return false;
	Ptr&lt;Profile&gt; profile1 = profs-&gt;item(0);
	if (!profile1)
		return false;
	Ptr&lt;Profile&gt; profile2 = profs-&gt;item(1);
	if (!profile2)
		return false;

	<span style="color:blue">// Get the inner and outer profile</span>
	Ptr&lt;AreaProperties&gt; areaPropertiesOfProfile1 = profile1-&gt;areaProperties();
	if (!areaPropertiesOfProfile1)
		return false;
	Ptr&lt;AreaProperties&gt; areaPropertiesOfProfile2 = profile2-&gt;areaProperties();
	if (!areaPropertiesOfProfile2)
		return false;
	double areaOfProfile1 = areaPropertiesOfProfile1-&gt;area();
	double areaOfProfile2 = areaPropertiesOfProfile2-&gt;area();
	Ptr&lt;Profile&gt; outerProfile = profile1;
	if (areaOfProfile1 &lt; areaOfProfile2)
	{
		outerProfile = profile2;
	}

	<span style="color:blue">// Create an extrusion based on the outer profile</span>
	Ptr&lt;Features&gt; feats = rootComp-&gt;features();
	if (!feats)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes = feats-&gt;extrudeFeatures();
	if (!extrudes)
		return false;
	Ptr&lt;ValueInput&gt; extrudeDistance = ValueInput::createByString("1 cm");
	if (!extrudeDistance)
		return false;
	Ptr&lt;ExtrudeFeature&gt; extrudeFeature = extrudes-&gt;addSimple(outerProfile, extrudeDistance, FeatureOperations::NewBodyFeatureOperation);
	if (!extrudeFeature)
		return false;

	<span style="color:blue">// Get BrepEdge from inner loop on the end face of the extrusion</span>
	Ptr&lt;BRepFaces&gt; endFacesObj = extrudeFeature-&gt;endFaces();
	if (!endFacesObj)
		return false;
	Ptr&lt;BRepFace&gt; endFace = endFacesObj-&gt;item(0);
	if (!endFace)
		return false;
	Ptr&lt;BRepLoops&gt; brepLoops = endFace-&gt;loops();
	if (!brepLoops)
		return false;
	Ptr&lt;BRepLoop&gt; innerLoop = brepLoops-&gt;item(0);
	if (!innerLoop)
		return false;
	if (innerLoop-&gt;isOuter())
	{
		innerLoop = brepLoops-&gt;item(1);
	}
	if (!innerLoop)
		return false;
	Ptr&lt;BRepEdges&gt; brepEdges = innerLoop-&gt;edges();
	if (!brepEdges)
		return false;
	Ptr&lt;BRepEdge&gt; brepEdge = brepEdges-&gt;item(0);
	if (!brepEdge)
		return false;

	<span style="color:blue">// Create the patch feature</span>
	Ptr&lt;PatchFeatures&gt; patches = feats-&gt;patchFeatures();
	if (!patches)
		return false;
	Ptr&lt;PatchFeatureInput&gt; patchInput = patches-&gt;createInput(brepEdge, adsk::fusion::FeatureOperations::NewBodyFeatureOperation);
	if (!patchInput)
		return false;
	Ptr&lt;PatchFeature&gt; patchFeature = patches-&gt;add(patchInput);
	if (!patchFeature)
		return false;


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(PatchFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>