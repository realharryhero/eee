<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ThreadFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Thread Feature API Sample Sample">
    <meta name="topicid" content="GUID-796D74F1-8DE9-43D9-84A5-6491A03D4574">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Thread Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Thread Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new thread feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback


def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
		
        <span style="color:blue"># get the design</span>
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)
        
        <span style="color:blue"># get the root component of the active design.</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># create a new sketch on the xy plane.</span>
        sketch = rootComp.sketches.add(rootComp.xYConstructionPlane)
        
        <span style="color:blue"># create a sketch circle</span>
        sketchCircles = sketch.sketchCurves.sketchCircles
        sketchCircle = sketchCircles.addByCenterRadius(adsk.core.Point3D.create(0, 0, 0), 3)
        
        <span style="color:blue"># get the profile defined by the circle.</span>
        prof = sketch.profiles.item(0)
        
        <span style="color:blue"># create extrude input</span>
        extrudes = rootComp.features.extrudeFeatures
        extrudeInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># define that the extent is a distance extent of 7 cm</span>
        extrudeInput.setDistanceExtent(False, adsk.core.ValueInput.createByReal(7))
        
        <span style="color:blue"># extrude the circle to create a cylinder</span>
        extrude = extrudes.add(extrudeInput)
        
        <span style="color:blue"># define all of the thread information.</span>
        threadFeatures = rootComp.features.threadFeatures
        
        <span style="color:blue"># query the thread table to get the thread information</span>
        threadDataQuery = threadFeatures.threadDataQuery
        threadTypes = threadDataQuery.allThreadTypes
        threadType = threadTypes[0]
        
        allsizes = threadDataQuery.allSizes(threadType)
        threadSize = allsizes[0]
        
        allDesignations = threadDataQuery.allDesignations(threadType, threadSize)
        threadDesignation = allDesignations[0]
        
        allClasses = threadDataQuery.allClasses(False, threadType, threadDesignation)
        threadClass = allClasses[0]
        
        <span style="color:blue"># create the threadInfo according to the query result</span>
        threadInfo = threadFeatures.createThreadInfo(False, threadType, threadDesignation, threadClass)
        
        <span style="color:blue"># get the face the thread will be applied to</span>
        sideface = extrude.sideFaces.item(0)
        faces = adsk.core.ObjectCollection.create()
        faces.add(sideface)
        
        <span style="color:blue"># define the thread input with the lenght 3.5 cm</span>
        threadInput = threadFeatures.createInput(faces, threadInfo)
        threadInput.isFullLength = False
        threadInput.threadLength = adsk.core.ValueInput.createByReal(3.5)
        
        <span style="color:blue"># create the final thread</span>
        thread = threadFeatures.add(threadInput)
        
        
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;

#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/ThreadFeatures.h&gt;
#include &lt;Fusion/Features/ThreadFeature.h&gt;
#include &lt;Fusion/Features/ThreadFeatureInput.h&gt;
#include &lt;Fusion/Features/ThreadDataQuery.h&gt;
#include &lt;Fusion/Features/ThreadInfo.h&gt;
#include &lt;Fusion/FusionTypeDefs.h&gt;

#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;
	
	<span style="color:blue">// create a new document</span>
	Ptr&lt;Documents&gt; docs = app-&gt;documents();
	if (!docs)
		return false;

	Ptr&lt;Document&gt; doc = docs-&gt;add(FusionDesignDocumentType);
	if (!doc)
		return false;

	<span style="color:blue">// get the design</span>
	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// get the root component of the active design.</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// create a new sketch on the xy plane.</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if (!sketches)
		return false;

	Ptr&lt;ConstructionPlane&gt; xyPlane = rootComp-&gt;xYConstructionPlane();
	if (!xyPlane)
		return false;

	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(xyPlane);
	if (!sketch)
		return false;

	<span style="color:blue">// create a sketch circle</span>
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if (!sketchCurves)
		return false;

	Ptr&lt;SketchCircles&gt; sketchCircles = sketchCurves-&gt;sketchCircles();
	if (!sketchCircles)
		return false;

	Ptr&lt;SketchCircle&gt; sketchCircle = sketchCircles-&gt;addByCenterRadius(Point3D::create(0, 0, 0), 3.0);
	if (!sketchCircle)
		return false;

	Ptr&lt;Profiles&gt; profiles = sketch-&gt;profiles();
	if (!profiles)
		return false;

	<span style="color:blue">// get the profile defined by the circle.</span>
	Ptr&lt;Profile&gt; profile = profiles-&gt;item(0);
	if (!profile)
		return false;

	<span style="color:blue">// Create an extrusion input</span>
	Ptr&lt;Features&gt; features = rootComp-&gt;features();
	if (!features)
		return false;

	Ptr&lt;ExtrudeFeatures&gt; extrudes = features-&gt;extrudeFeatures();
	if (!extrudes)
		return false;

	Ptr&lt;ExtrudeFeatureInput&gt; extrudeInput = extrudes-&gt;createInput(profile, NewBodyFeatureOperation);
	if (!extrudeInput)
		return false;

	<span style="color:blue">// Define that the extent is a distance extent of 7 cm.</span>
	bool bRet = extrudeInput-&gt;setDistanceExtent(false, ValueInput::createByReal(7));
	if (!bRet)
		return false;

	<span style="color:blue">// Create the extrusion.</span>
	Ptr&lt;ExtrudeFeature&gt; extrude = extrudes-&gt;add(extrudeInput);
	if (!extrude)
		return false;

	<span style="color:blue">// define all of the thread information.</span>
	Ptr&lt;ThreadFeatures&gt; threadFeatures = features-&gt;threadFeatures();
	if (!threadFeatures)
		return false;

	<span style="color:blue">// query the thread table to get the thread information</span>
	Ptr&lt;ThreadDataQuery&gt; threadDataQuery = threadFeatures-&gt;threadDataQuery();
	if (!threadDataQuery)
		return false;
	std::vector&lt;std::string&gt; threadTypes = threadDataQuery-&gt;allThreadTypes();
	if (threadTypes.size() == 0)
		return false;
	std::string threadType = threadTypes[0];

	std::vector&lt;std::string&gt; allsizes = threadDataQuery-&gt;allSizes(threadType);
	if (allsizes.size() == 0)
		return false;
	std::string threadSize = allsizes[0];

	std::vector&lt;std::string&gt; allDesignations = threadDataQuery-&gt;allDesignations(threadType, threadSize);
	if (allDesignations.size() == 0)
		return false;
	std::string threadDesignation = allDesignations[0];

	std::vector&lt;std::string&gt; allClasses = threadDataQuery-&gt;allClasses(false, threadType, threadDesignation);
	if (allClasses.size() == 0)
		return false;
	std::string threadClass = allClasses[0];

	<span style="color:blue">// create the threadInfo according to the query result</span>
	Ptr&lt;ThreadInfo&gt; threadInfo = threadFeatures-&gt;createThreadInfo(false, threadType, threadDesignation, threadClass);
	if (!threadInfo)
		return false;

	<span style="color:blue">// get the face the thread will be applied to</span>
	Ptr&lt;BRepFaces&gt; sideFaces = extrude-&gt;sideFaces();
	if (!sideFaces)
		return false;

	Ptr&lt;BRepFace&gt; sideface = sideFaces-&gt;item(0);
	if (!sideface)
		return false;
	Ptr&lt;ObjectCollection&gt; faces = ObjectCollection::create();
	if (!faces)
		return false;
	faces-&gt;add(sideface);

	<span style="color:blue">// define the thread input with the lenght 3.5 cm</span>
	Ptr&lt;ThreadFeatureInput&gt; threadInput = threadFeatures-&gt;createInput(faces, threadInfo);
	if (!threadInput)
		return false;

	threadInput-&gt;isFullLength(false);
	threadInput-&gt;threadLength(ValueInput::createByReal(3.5));

	<span style="color:blue">// create the final thread</span>
	Ptr&lt;ThreadFeature&gt; thread = threadFeatures-&gt;add(threadInput);
	if (!thread)
		return false;


	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ThreadFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>