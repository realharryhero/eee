<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/ConstructionAxisSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Construction Axis API Sample Sample">
    <meta name="topicid" content="GUID-b1864cd4-aa06-11e5-a347-3417ebd3d5be">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Construction Axis API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Construction Axis API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating construction axis in various ways.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui = app.userInterface
        
        <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create sketch</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        sketchCircles = sketch.sketchCurves.sketchCircles
        centerPoint = adsk.core.Point3D.create(0, 0, 0)
        sketchCircles.addByCenterRadius(centerPoint, 5.0)
        
        sketchLines = sketch.sketchCurves.sketchLines
        sketchLines.addTwoPointRectangle(adsk.core.Point3D.create(6, 6, 0), adsk.core.Point3D.create(-6, -6, 0))
        
        <span style="color:blue"># Get the profile defined by the circle</span>
        prof = sketch.profiles.item(1)

        <span style="color:blue"># Create an extrusion input</span>
        extrudes = rootComp.features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent is a distance extent of 5 cm</span>
        distance = adsk.core.ValueInput.createByReal(5)
        <span style="color:blue"># Set the distance extent to be symmetric</span>
        extInput.setDistanceExtent(True, distance)
        <span style="color:blue"># Set the extrude to be a solid one</span>
        extInput.isSolid = True

        <span style="color:blue"># Create the extrusion</span>
        ext = extrudes.add(extInput)
        
        <span style="color:blue"># Get the body created by the extrusion</span>
        body = ext.bodies.item(0)
        
        axes = rootComp.constructionAxes
        axisInput = axes.createInput()
        
        <span style="color:blue"># Add by line</span>
        if design.designType == adsk.fusion.DesignTypes.DirectDesignType:
            axisInput.setByLine(adsk.core.InfiniteLine3D.create(adsk.core.Point3D.create(0), adsk.core.Vector3D.create(1, 0, 0)))
            axes.add(axisInput)
        
        <span style="color:blue"># Prepare reference data</span>
        circularFace = None
        for face in body.faces:
            geom = face.geometry
            if geom.surfaceType == adsk.core.SurfaceTypes.CylinderSurfaceType:
                circularFace = face
                break
        
        linearEdge = None
        for edge in body.edges:
            edgeGeom = edge.geometry
            if edgeGeom.curveType == adsk.core.Curve3DTypes.Line3DCurveType:
                linearEdge = edge
                break
        
        faceOne = linearEdge.faces.item(0)
        faceTwo = linearEdge.faces.item(1)
        vertexOne = faceOne.vertices.item(0)
        vertexTwo = faceOne.vertices.item(1)
        
        <span style="color:blue"># Add by circularFace</span>
        axisInput.setByCircularFace(circularFace)
        axes.add(axisInput)
        
        <span style="color:blue"># Add by perpendicular at point</span>
        axisInput.setByPerpendicularAtPoint(faceOne, vertexOne)
        axes.add(axisInput)
        
        <span style="color:blue"># Add by two planes</span>
        axisInput.setByTwoPlanes(faceOne, faceTwo)
        axes.add(axisInput)
        
        <span style="color:blue"># Add by two points</span>
        axisInput.setByTwoPoints(vertexOne, vertexTwo)
        axes.add(axisInput)
        
        <span style="color:blue"># Add by edge</span>
        axisInput.setByEdge(linearEdge)
        axes.add(axisInput)
        
        <span style="color:blue"># Add by normal to face at point</span>
        axisInput.setByNormalToFaceAtPoint(faceTwo, vertexOne)
        axis = axes.add(axisInput)
        
        <span style="color:blue"># Get health state of the axis</span>
        health = axis.healthState
        if health == adsk.fusion.FeatureHealthStates.WarningFeatureHealthState or health == adsk.fusion.FeatureHealthStates.ErrorFeatureHealthState:
            message = axis.errorOrWarningMessage
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/Geometry/InfiniteLine3D.h&gt;
#include &lt;Core/Geometry/Line3D.h&gt;
#include &lt;Core/Geometry/Surface.h&gt;
#include &lt;Core/Geometry/Vector3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/BRep/BRepBody.h&gt;
#include &lt;Fusion/BRep/BRepBodies.h&gt;
#include &lt;Fusion/BRep/BRepEdge.h&gt;
#include &lt;Fusion/BRep/BRepEdges.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/BRep/BRepVertices.h&gt;
#include &lt;Fusion/BRep/BRepVertex.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionAxes.h&gt;
#include &lt;Fusion/Construction/ConstructionAxis.h&gt;
#include &lt;Fusion/Construction/ConstructionAxisInput.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/SketchLine.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;

using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; documents = app-&gt;documents();
	if (!documents)
		return false;

	Ptr&lt;Document&gt; doc = documents-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Product&gt; product = app-&gt;activeProduct();
	if (!product)
		return false;

	Ptr&lt;Design&gt; design = product;
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if(!rootComp)
		return false;

	<span style="color:blue">// Create sketch</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if(!sketches)
		return false;
	Ptr&lt;ConstructionPlane&gt; xz = rootComp-&gt;xZConstructionPlane();
	if(!xz)
		return false;
	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(xz);
	if(!sketch)
		return false;
	Ptr&lt;SketchCurves&gt; sketchCurves = sketch-&gt;sketchCurves();
	if(!sketchCurves)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles = sketchCurves-&gt;sketchCircles();
	if(!sketchCircles)
		return false;
	Ptr&lt;Point3D&gt; centerPoint = Point3D::create(0, 0, 0);
	if(!centerPoint)
		return false;
	Ptr&lt;SketchCircle&gt; circle = sketchCircles-&gt;addByCenterRadius(centerPoint, 5.0);
	if(!circle)
		return false;

	Ptr&lt;SketchLines&gt; sketchLines = sketchCurves-&gt;sketchLines();
	if(!sketchLines)
		return false;
	sketchLines-&gt;addTwoPointRectangle(Point3D::create(6, 6, 0), Point3D::create(-6, -6, 0));

	<span style="color:blue">// Get the profile defined by the circle</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if(!profs)
		return false;
	Ptr&lt;Profile&gt; prof = profs-&gt;item(1);
	if(!prof)
		return false;

	<span style="color:blue">// Create an extrusion input</span>
	Ptr&lt;Features&gt; feats = rootComp-&gt;features();
	if(!feats)
		return false;
	Ptr&lt;ExtrudeFeatures&gt; extrudes = feats-&gt;extrudeFeatures();
	if(!extrudes)
		return false;
	Ptr&lt;ExtrudeFeatureInput&gt; extInput = extrudes-&gt;createInput(prof, FeatureOperations::NewBodyFeatureOperation);
	if(!extInput)
		return false;

	<span style="color:blue">// Define that the extent is a distance extent of 5 cm</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(5);
	if(!distance)
		return false;
	<span style="color:blue">// Set the distance extent to be symmetric</span>
	extInput-&gt;setDistanceExtent(true, distance);
	<span style="color:blue">// Set the extrude to be a solid one</span>
	extInput-&gt;isSolid(true);

	<span style="color:blue">// Create the extrusion</span>
	Ptr&lt;ExtrudeFeature&gt; ext = extrudes-&gt;add(extInput);
	if(!ext)
		return false;

	<span style="color:blue">// Get the body created by the extrusion</span>
	Ptr&lt;BRepBodies&gt; bodies = ext-&gt;bodies();
	if(!bodies)
		return false;
	Ptr&lt;BRepBody&gt; body = bodies-&gt;item(0);
	if(!body)
		return false;

	Ptr&lt;ConstructionAxes&gt; axes = rootComp-&gt;constructionAxes();
	if(!axes)
		return false;

	Ptr&lt;ConstructionAxisInput&gt; axisInput = axes-&gt;createInput();
	if(!axisInput)
		return false;

	<span style="color:blue">// Add by line</span>
	if(design-&gt;designType() == DesignTypes::DirectDesignType){
		axisInput-&gt;setByLine(InfiniteLine3D::create(Point3D::create(0), Vector3D::create(1, 0, 0)));
		axes-&gt;add(axisInput);
	}

	Ptr&lt;BRepFaces&gt; faces = body-&gt;faces();
	if(!faces)
		return false;

	<span style="color:blue">// Prepare reference data</span>
	Ptr&lt;BRepFace&gt; circularFace = nullptr;
	for(auto face : faces){
		Ptr&lt;Surface&gt; geom = face-&gt;geometry();
		if(geom-&gt;surfaceType() == SurfaceTypes::CylinderSurfaceType){
			circularFace = face;
			break;
		}
	}

	Ptr&lt;BRepEdge&gt; linearEdge = nullptr;
	for(auto edge : body-&gt;edges()){
		Ptr&lt;Curve3D&gt; edgeGeom = edge-&gt;geometry();
		if(edgeGeom-&gt;curveType() == Curve3DTypes::Line3DCurveType){
			linearEdge = edge;
			break;
		}
	}

	Ptr&lt;BRepFace&gt; faceOne = faces-&gt;item(0);
	if(!faceOne)
		return false;

	Ptr&lt;BRepFace&gt; faceTwo = faces-&gt;item(1);
	if(!faceTwo)
		return false;

	Ptr&lt;BRepVertices&gt; vertices = faceOne-&gt;vertices();
	if(!vertices)
		return false;

	Ptr&lt;BRepVertex&gt; vertexOne = vertices-&gt;item(0);
	if(!vertexOne)
		return false;

	Ptr&lt;BRepVertex&gt; vertexTwo = vertices-&gt;item(1);
	if(!vertexTwo)
		return false;

	<span style="color:blue">// Add by circularFace</span>
	axisInput-&gt;setByCircularFace(circularFace);
	axes-&gt;add(axisInput);

	<span style="color:blue">// Add by perpendicular at point</span>
	axisInput-&gt;setByPerpendicularAtPoint(faceOne, vertexOne);
	axes-&gt;add(axisInput);

	<span style="color:blue">// Add by two planes</span>
	axisInput-&gt;setByTwoPlanes(faceOne, faceTwo);
	axes-&gt;add(axisInput);

	<span style="color:blue">// Add by two points</span>
	axisInput-&gt;setByTwoPoints(vertexOne, vertexTwo);
	axes-&gt;add(axisInput);

	<span style="color:blue">// Add by edge</span>
	axisInput-&gt;setByEdge(linearEdge);
	axes-&gt;add(axisInput);

	<span style="color:blue">// Add by normal to face at point</span>
	axisInput-&gt;setByNormalToFaceAtPoint(faceTwo, vertexOne);
	Ptr&lt;ConstructionAxis&gt; axis = axes-&gt;add(axisInput);

	<span style="color:blue">// Get the health state of a construction plane</span>
	adsk::fusion::FeatureHealthStates health = axis-&gt;healthState();
	if (health == adsk::fusion::FeatureHealthStates::ErrorFeatureHealthState
		|| health == adsk::fusion::FeatureHealthStates::WarningFeatureHealthState) {
		std::string msg = axis-&gt;errorOrWarningMessage();
	}

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(ConstructionAxisSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>