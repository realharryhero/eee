<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/Units_UM.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="28/7/2014">
    <meta name="user-comments" content="enable">
    <meta name="description" content="">
    <meta name="topicid" content="GUID-A81B295F-984A-4039-B1CF-B449BEE893D7">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Understanding Units in Fusion 360</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
	<link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"/>
	<script type="text/javascript" src="/view/clientframework/client.js"><!--filler--></script> 
	<script>
	  // This turns on the display of the copyright notice which is not visible by default.
	  // Because the head is removed when used in the web help, this function will only exists
	  // when the chm help is being created.
	  window.onload = function() {
		copyrightElement = document.getElementById('CopyrightNotice');
		copyrightElement.style.display = 'block';
	  };
	</script>
</head>
<body>
<link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
	
<h2 class="api">Understanding Units in Fusion 360</h2>
<p Class="Normal">Understanding how Fusion 360 uses units is very important in successfully using the API. When using the API the units used by Fusion 360 are always consistent.  Getting and setting values always use the internal unit type for that category of units. These unit types are known as database units because these are the same units that Fusion 360 uses internally and how data is saved in the file.  These units are:</p>
<p Class="Normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Lengths - Centimeters<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Angles - Radians<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mass - Kilograms</p>  
<p Class="Normal">The internal units always use these types without any exceptions.  For example, if you call the SketchCurve.length property to get the length of an entity in a sketch, the value returned will always be in centimeters.  If you use the Vector3D.angleTo method to measure the angle between two vectors, the resulting angle will always be returned in radians (remember that &#960; radians equals 180 degrees). At first this might not seem ideal because you might want to work in other units.  However, this actually makes most things easier because you can always count on the units being consistent and don't have to worry about the current active unit which the user can change.  You just write your program to work in the units listed above and it will always work as expected regardless of the active units.  The only time you need to worry about unit conversions is when you need to interact with the user by having them enter a value or to display a value.</p>

<h3 class="api">Units when Communicating with the User</h3>
<p Class="Normal">Units become a bit more complicated when interacting with the user.  This is because of several reasons.  First, the user can choose one of several length units as the default as shown below.  This has the side effect of also setting the default mass units.  For example, if you choose inches the mass unit is pounds, but if you choose centimeters it is grams.  Angles for the user are always in degrees.  

<div align="center"><img src="../images/UnitsChangeActiveUnits.png" border=0 align="middle" alt="Change Active Units"></div>
<br>

<p Class="Normal">A second reason working with the user is more difficult is because when the user enters a value the result is a string that needs to be evaluated to make sure what they entered is valid and then interpreted into a real value.  A third reason is that what they enter doesn't necessarily have to be a simple value.  Here are three examples of valid entries when specifying the depth of a hole:</p>
<p Class="Normal">
<ul>
<li>"3" - In this case the result depends on what the user has chosen as the active unit.  For example, if they've chosen inches this is interpreted as 3 inches and if they've chosen millimeters this is interpreted as 3 millimeters.</li>
<li>"3 in" - In this case this is always interpreted as 3 inches, regardless of what the active unit is.</li>
<li>"3/2" - This results in 3 units of the active unit divided by 2.</li>
<li>"hole_depth" - This references an existing parameter.  Of course they could also use this as part of an equation, i.e. "hole_depth / 2".</li>
</ul>
</p>

<p Class="Normal">Because the user has a lot of flexibility in the way they can specify values and because they can also change the active unit it would be difficult to write code to correctly interpret any string entered by the user.  To help with this, the API supports some utilities that convert a user string into internal units.  This allows you to take any of the strings in the example above and convert them to a distance value in database units (centimeters).</p>

<p>This is also how Fusion 360 works internally.  Any time a user enters any data, it is a string and Fusion 360 has to parse the string and figure out if it's valid and what the real value is.  It converts the string into the real value in database units and uses that for all operations within Fusion 360.  If a value needs to be displayed to the user, a string is created that is based on the current active unit and other unit settings and displayed to the user.</p>

<h3 class="api">Using the UnitsManager Object</h3>
<p Class="Normal">The UnitsManager object supports functions that make working with units much easier. The code below prompts the user to enter a length using the input box.  The input box allows the user to enter any string without any expectation on what the string represents.  The code then validates that the entry is a valid length expression and then displays the evaluated results in centimeters.</p>

<pre class="api-code">
<span style="color:blue">// Prompt the user for a string and validate it's valid.</span>
var isValid = false;
var input = '1 in';  <span style="color:blue">// The initial default value.</span>
var realValue;
while (!isValid) {
    <span style="color:blue">// Get a string from the user.</span>
    var objIsCancelled = [];
    input = ui.inputBox('Enter a distance', objIsCancelled, 'Distance', input);
            
    <span style="color:blue">// Exit the program if the dialog was cancelled.</span>
    if (objIsCancelled.value) {
        adsk.terminate();    
        return;
    }
            
    <span style="color:blue">// Check that a valid length was entered.</span>
    var unitsMgr = design.unitsManager;
    try {
        realValue = unitsMgr.evaluateExpression(input, unitsMgr.defaultLengthUnits);
        isValid = true;
    }
    catch (e) {
        <span style="color:blue">// Invalid expression so display an error and set the flag to allow them
        // to enter a value again.</span>
        ui.messageBox('"' + input + '" is not a valid length expression.', 'Invalid entry', 
                      adsk.core.MessageBoxButtonTypes.OKButtonType, 
                      adsk.core.MessageBoxIconTypes.CriticalIconType);
        isValid = false;
    }
}
        
<span style="color:blue">// Use the value for something.</span>
ui.messageBox('input: ' + input + ', result: ' + realValue);

</pre>
<br />
<p Class="Normal">When you get a value from Fusion 360 or compute it yourself and need to display it to the user you can use the UnitsManager object to format the value so it's in the correct unit and has the correct number of decimals based on the current user preferences.</p>

<pre class="api-code">
<span style="color:blue">// Display the result using the current active units.</span>
var unitsMgr = design.unitsManager;
var displayLength = unitsMgr.formatInternalValue(length, unitsMgr.defaultLength, true);        
ui.messageBox('The length of all edges in the selected body is: ' + displayLength);
</pre>
<br />	
<p Class="Normal">The length passed in is always expected to be in database units (centimeters) and the formatInternalValue method formats it to be in the specified units.  The most common thing to do will be to use the default length, which is what this sample is doing.  If you need to specify another unit type besides the default length you can specify it by name.</p>

<p Class="Normal">Most of the functions available on the UnitsManager object have arguments where you need to specify a unit.  Units are specified using a string and use the same strings you use when specifying units for a parameter, although the UnitManager is more flexible in how you can combine the units.  For example, Fusion 360 won't let you create a parameter for an acceleration by using a combination of existing known unit types such as "m/s/s" or "m/s^2".  However, these are valid unit descriptions when used within the UnitsManager. The sample below defines the units using meters and seconds so the result returned is "0.20 m / s^2".</p>

<pre class="api-code">
var result = unitsMgr.formatInternalValue(20, 'm/s/s', true);
</pre>
<br />	

<p Class="Normal">The last argument indicates if the unit specifier should be appended to the result or if it should just be the value. This ends up displaying the dialog shown below.</p>
<br />
<div align="center"><img src="../images/UnitsLengthResult.png" border=0 align="middle" alt="Display "></div>
<br />

<h3 class="api">Working with Parameters</h3>
<p Class="Normal">When discussing units it's important to understand their use with respect to parameters; both editing existing parameters and when creating new objects that rely on parameters. For example, when you create an extrusion that is a defined depth there is a parameter automatically created that controls the depth of the extrusion.  In the user interface you enter the depth in the Extrude dialog, which is really a string that is used as the expression of the parameter that will be created.  When creating an extrusion using the API there is a little more flexibility in specifying the depth.  You can mimic the user interface and provide a string that defines a valid length but the API also supports specifying a real value, which is always in database units (centimeters in this case since it is a length).  To be able to specify either a string expression or a real value for the depth, Fusion 360 supports an object called <i>ValueInput</i> that is used any time you're providing a value that will become a parameter.  A ValueInput object is a relatively simple object that contains either a real value or a string.  When creating a ValueInput object you can use either the ValueInput.createByReal or ValueInput.createByString methods.  If you create a ValueInput using a string then the ValueInput will be evaluated the same as other strings entered by the user, as described above.  If you create a ValueInput using a real value then the value is assumed to be in database units of whatever unit is needed.  For example, in the case of the extrusion the value will be assumed to be in centimeters since the extrusion depth is a length.  You can use either option depending on the data you have.  If you have a string provided by the user or for some reason want to define an equation you can use createByString.  If you've calculated a value then you can use createByReal.  The code below demonstrates this. The profile and the part depth have already been obtained.<p>

<pre class="api-code">
<span style="color:blue">// Create an extrusion input to be able to define the input needed for an extrusion.</span>
var extrudes = rootComp.features.extrudeFeatures;
var extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewComponentFeatureOperation);

<span style="color:blue">// Define that the extent is a distance extent is half the depth of the part.</span>
var distance = adsk.core.ValueInput.createByReal(partDepth / 2);
extInput.setDistanceExtent(false, distance);
		
<span style="color:blue">// Create the extrusion.</span>
var ext = extrudes.add(extInput); 
</pre>
<br />	

<p Class="Normal">The ValueInput object serves as a way to pass in either a string or a real value through a single argument.  If you pass in a string, that string is used as the equation of the parameter that's created.  This means it can include references to other parameters, functions, etc.  If you pass in a real value, an equation is computed by Fusion 360 and displayed in the parameters dialog.<p>

<p Class="Normal">When changing the value of a parameter using the API, you have the option of using the expression property, which is a string and is the same as the user using the Parameters dialog to change the value of a parameter.  Using the expression property you can enter any valid parameter expression.  Internally, Fusion 360 takes this string and evaluates it to make sure it is valid.  In addition to setting the expression, the API also supports setting a parameter using a real value through the valueInput property.  The real value is assumed to be in database units for whatever unit type is associated with the parameter, and directly assigns it to the parameter.  This will override the existing expression and Fusion 360 will create the equivalent expression to display in the dialog.  The value shown in the "Value" column is actually the real internal value converted into a string using something similar to the formatInternalValue method discussed above.  It's shown in the current document default unit with the number of decimals specified in preferences.  It's only through the API that you have direct access to read and write the internal value.<p>
</p>
<br />
<div align="center"><img src="../images/UnitsParametersDialog.png" border=0 align="middle" alt="ParameterDialog"></div>

<br />
<br />
<div id="CopyrightNotice" style="display:none;">
  <hr />
  <table width="100%" style="font-size:15">
	<tr>
	  <td align="left">
		&copy; Copyright 2017 Autodesk, Inc.
	  </td>
	  <td align="right">
		<a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(Units_UM)">Comment on this page.</a>
	  </td>
	</tr>
  </table>
</div>
</body>
</html>