<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/SplitFaceFeatureSample_Sample.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="">
    <meta name="user-comments" content="enable">
    <meta name="description" content="Split Face Feature API Sample Sample">
    <meta name="topicid" content="GUID-1657a962-ee3e-11e4-9056-3417ebd3d5be">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Split Face Feature API Sample</title>
    <link rel="stylesheet" href="../Style/jquery-ui.css"><script src="../Scripts/jquery-1.11.1.js"></script><script src="../Scripts/jquery-ui.js"></script><link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
    <link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"><script type="text/javascript" src="/view/clientframework/client.js"></script><script>
          // This turns on the display of the copyright notice which is not visible by default.
          // Because the head is removed when used in the web help, this function will only exists
          // when the chm help is being created.
          window.onload = function() {
          copyrightElement = document.getElementById('CopyrightNotice');
          copyrightElement.style.display = 'block';
          };
        </script><script>
          $(function() {
          $( "#tabs" ).tabs();
          });
        </script></head>
  <body>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
    <h1 class="api">Split Face Feature API Sample API Sample
        </h1>
    <h2 class="api">
          Description
        </h2>Demonstrates creating a new split face feature.<h2 class="api">
          Code Samples
        </h2>
    <div id="tabs">
      <ul>
        <li><a href="#Python">Python</a></li>
        <li><a href="#C++">C++</a></li>
      </ul>
      <div id="Python" class="api-code">
        <pre class="api-code">import adsk.core, adsk.fusion, traceback

def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        
         <span style="color:blue"># Create a document.</span>
        doc = app.documents.add(adsk.core.DocumentTypes.FusionDesignDocumentType)
 
        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)

        <span style="color:blue"># Get the root component of the active design</span>
        rootComp = design.rootComponent
        
        <span style="color:blue"># Create a sketch that has a rectangle in it</span>
        sketches = rootComp.sketches
        sketch = sketches.add(rootComp.xZConstructionPlane)
        sketchLines = sketch.sketchCurves.sketchLines
        point0 = adsk.core.Point3D.create(0, 0, 0)
        point1 = adsk.core.Point3D.create(10, 10, 0)
        sketchLines.addTwoPointRectangle(point0, point1)
        
        <span style="color:blue"># Get the profile defined by the rectangle</span>
        prof = sketch.profiles.item(0)

        <span style="color:blue"># Create an extrusion input</span>
        extrudes = rootComp.features.extrudeFeatures
        extInput = extrudes.createInput(prof, adsk.fusion.FeatureOperations.NewBodyFeatureOperation)
        
        <span style="color:blue"># Define that the extent is a distance extent of 5 cm</span>
        distance = adsk.core.ValueInput.createByReal(5)
        extInput.setDistanceExtent(True, distance)

        <span style="color:blue"># Create the extrusion</span>
        ext = extrudes.add(extInput)

        <span style="color:blue"># Get one edge of the extrusion body</span>
        face = ext.endFaces.item(0)
        edge = face.edges.item(0)
        
        <span style="color:blue"># Create a slant construction plane with an angle of 45 deg on the xZConstructionPlane</span>
        planeInput = rootComp.constructionPlanes.createInput()
        planeInput.setByAngle(edge, adsk.core.ValueInput.createByString('45 deg'), rootComp.xZConstructionPlane)
        plane = rootComp.constructionPlanes.add(planeInput)
        
        <span style="color:blue"># Create another sketch containing a circle profile on the slant plane</span>
        toolSketch = sketches.add(plane)
        sketchCircles = toolSketch.sketchCurves.sketchCircles
        circle = sketchCircles.addByCenterRadius(point0, 3)
        
        <span style="color:blue"># Get SplitFaceFetures</span>
        splitFaceFeats = rootComp.features.splitFaceFeatures
        
        <span style="color:blue"># Set faces to split</span>
        facesCol = adsk.core.ObjectCollection.create()
        facesCol.add(face)
        
        <span style="color:blue"># Create a split face feature of surface intersection split type</span>
        splitFaceInput = splitFaceFeats.createInput(facesCol, circle, True)
        split = splitFaceFeats.add(splitFaceInput)
        split.deleteMe()
        
        <span style="color:blue"># Create another split face feature of closest point split type   </span>
        splitFaceInput.setClosestPointSplitType()
        split = splitFaceFeats.add(splitFaceInput)
        split.deleteMe()
        
        <span style="color:blue"># Create another split face feature of along vector split type   </span>
        splitFaceInput.setAlongVectorSplitType(face.edges.item(1))
        splitFaceFeats.add(splitFaceInput)
        
    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))</pre>
      </div>
      <div id="C++" class="api-code">
        <pre class="api-code">#include &lt;Core/Application/Application.h&gt;
#include &lt;Core/Application/Document.h&gt;
#include &lt;Core/Application/Documents.h&gt;
#include &lt;Core/Application/ObjectCollection.h&gt;
#include &lt;Core/Application/Product.h&gt;
#include &lt;Core/Application/ValueInput.h&gt;
#include &lt;Core/Geometry/Point3D.h&gt;
#include &lt;Core/UserInterface/UserInterface.h&gt;
#include &lt;Fusion/BRep/BRepFace.h&gt;
#include &lt;Fusion/BRep/BRepFaces.h&gt;
#include &lt;Fusion/BRep/BRepEdge.h&gt;
#include &lt;Fusion/BRep/BRepEdges.h&gt;
#include &lt;Fusion/Components/Component.h&gt;
#include &lt;Fusion/Construction/ConstructionPlane.h&gt;
#include &lt;Fusion/Construction/ConstructionPlanes.h&gt;
#include &lt;Fusion/Construction/ConstructionPlaneInput.h&gt;
#include &lt;Fusion/Features/ExtrudeFeature.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatureInput.h&gt;
#include &lt;Fusion/Features/ExtrudeFeatures.h&gt;
#include &lt;Fusion/Features/Features.h&gt;
#include &lt;Fusion/Features/SplitFaceFeatureInput.h&gt;
#include &lt;Fusion/Features/SplitFaceFeatures.h&gt;
#include &lt;Fusion/Features/SplitFaceFeature.h&gt;
#include &lt;Fusion/Fusion/Design.h&gt;
#include &lt;Fusion/Sketch/Profile.h&gt;
#include &lt;Fusion/Sketch/Profiles.h&gt;
#include &lt;Fusion/Sketch/Sketch.h&gt;
#include &lt;Fusion/Sketch/SketchCircles.h&gt;
#include &lt;Fusion/Sketch/SketchCircle.h&gt;
#include &lt;Fusion/Sketch/SketchLines.h&gt;
#include &lt;Fusion/Sketch/SketchCurves.h&gt;
#include &lt;Fusion/Sketch/Sketches.h&gt;


using namespace adsk::core;
using namespace adsk::fusion;

Ptr&lt;UserInterface&gt; ui;

extern "C" XI_EXPORT bool run(const char* context)
{
	Ptr&lt;Application&gt; app = Application::get();
	if (!app)
		return false;

	ui = app-&gt;userInterface();
	if (!ui)
		return false;

	Ptr&lt;Documents&gt; docs = app-&gt;documents();
	if (!docs)
		return false;

	<span style="color:blue">// Create a document.</span>
	Ptr&lt;Document&gt; doc = docs-&gt;add(DocumentTypes::FusionDesignDocumentType);
	if (!doc)
		return false;

	Ptr&lt;Design&gt; design = app-&gt;activeProduct();
	if (!design)
		return false;

	<span style="color:blue">// Get the root component of the active design</span>
	Ptr&lt;Component&gt; rootComp = design-&gt;rootComponent();
	if (!rootComp)
		return false;

	<span style="color:blue">// Create a sketch that has a rectangle in it</span>
	Ptr&lt;Sketches&gt; sketches = rootComp-&gt;sketches();
	if (!sketches)
		return false;

	Ptr&lt;Sketch&gt; sketch = sketches-&gt;add(rootComp-&gt;xZConstructionPlane());
	if (!sketch)
		return false;

	Ptr&lt;SketchCurves&gt; curves = sketch-&gt;sketchCurves();
	if (!curves)
		return false;

	Ptr&lt;SketchLines&gt; sketchLines = curves-&gt;sketchLines();
	if (!sketchLines)
		return false;

	Ptr&lt;Point3D&gt; point0 = adsk::core::Point3D::create(0, 0, 0);
	if (!point0)
		return false;
	Ptr&lt;Point3D&gt; point1 = adsk::core::Point3D::create(10, 10, 0);
	if (!point1)
		return false;

	sketchLines-&gt;addTwoPointRectangle(point0, point1);

	<span style="color:blue">// Get the profile defined by the circle</span>
	Ptr&lt;Profiles&gt; profs = sketch-&gt;profiles();
	if (!profs)
		return false;

	Ptr&lt;Profile&gt; prof = profs-&gt;item(0);
	if (!prof)
		return false;

	<span style="color:blue">// Create an extrusion input</span>
	Ptr&lt;Features&gt; feats = rootComp-&gt;features();
	if (!feats)
		return false;

	Ptr&lt;ExtrudeFeatures&gt; extrudes = feats-&gt;extrudeFeatures();
	if (!extrudes)
		return false;

	Ptr&lt;ExtrudeFeatureInput&gt; extInput = extrudes-&gt;createInput(prof, FeatureOperations::NewBodyFeatureOperation);
	if (!extInput)
		return false;

	<span style="color:blue">// Define that the extent is a distance extent of 5 cm</span>
	Ptr&lt;ValueInput&gt; distance = ValueInput::createByReal(5);
	if (!distance)
		return false;

	extInput-&gt;setDistanceExtent(true, distance);

	<span style="color:blue">// Create the extrusion</span>
	Ptr&lt;ExtrudeFeature&gt; ext = extrudes-&gt;add(extInput);
	if (!ext)
		return false;

	<span style="color:blue">// Get one edge of the extrusion body</span>
	Ptr&lt;BRepFaces&gt; faces = ext-&gt;endFaces();
	if (!faces)
		return false;
	Ptr&lt;BRepFace&gt; face = faces-&gt;item(0);
	if (!face)
		return false;
	Ptr&lt;BRepEdges&gt; edges = face-&gt;edges();
	if (!edges)
		return false;
	Ptr&lt;BRepEdge&gt; edge = edges-&gt;item(0);
	if (!edge)
		return false;

	<span style="color:blue">// Create a slant construction plane with an angle of 45 deg on the xZConstructionPlane</span>
	Ptr&lt;ConstructionPlanes&gt; planes = rootComp-&gt;constructionPlanes();
	if (!planes)
		return false;

	Ptr&lt;ConstructionPlaneInput&gt; planeInput = planes-&gt;createInput();
	if (!planeInput)
		return false;
	planeInput-&gt;setByAngle(edge, adsk::core::ValueInput::createByString("45 deg"), rootComp-&gt;xZConstructionPlane());
	Ptr&lt;ConstructionPlane&gt; plane = planes-&gt;add(planeInput);

	<span style="color:blue">// Create another sketch containing a circle profile on the slant plane</span>
	Ptr&lt;Sketch&gt; toolSketch = sketches-&gt;add(plane);
	if (!toolSketch)
		return false;
	Ptr&lt;SketchCurves&gt; toolCurves = toolSketch-&gt;sketchCurves();
	if (!toolCurves)
		return false;
	Ptr&lt;SketchCircles&gt; sketchCircles = toolCurves-&gt;sketchCircles();
	if (!sketchCircles)
		return false;
	Ptr&lt;SketchCircle&gt; circle = sketchCircles-&gt;addByCenterRadius(point0, 5.0);
	if (!circle)
		return false;

	<span style="color:blue">// Get SplitFaceFetures</span>
	Ptr&lt;SplitFaceFeatures&gt; splitFaceFeats = feats-&gt;splitFaceFeatures();
	if (!splitFaceFeats)
		return false;

	<span style="color:blue">// Set faces to split</span>
	Ptr&lt;ObjectCollection&gt; facesCol = ObjectCollection::create();
	if (!facesCol)
		return false;
	facesCol-&gt;add(face);

	<span style="color:blue">// Create Create a split face feature of surface intersection split type</span>
	Ptr&lt;SplitFaceFeatureInput&gt; splitFaceInput = splitFaceFeats-&gt;createInput(facesCol, circle, true);
	if (!splitFaceInput)
		return false;
	Ptr&lt;SplitFaceFeature&gt; split = splitFaceFeats-&gt;add(splitFaceInput);
	if (!split)
		return false;
	split-&gt;deleteMe();

	<span style="color:blue">// Create another split face feature of closest point split type   </span>
	splitFaceInput-&gt;setClosestPointSplitType();
	split = splitFaceFeats-&gt;add(splitFaceInput);
	if (!split)
		return false;
	split-&gt;deleteMe();

	<span style="color:blue">// Create another split face feature of along vector split type</span>
	Ptr&lt;BRepEdge&gt; dirEdge = edges-&gt;item(1);
	if (!dirEdge)
		return false;
	splitFaceInput-&gt;setAlongVectorSplitType(dirEdge);
	splitFaceFeats-&gt;add(splitFaceInput);

	return true;
}


#ifdef XI_WIN

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif <span style="color:blue">// XI_WIN</span></pre>
      </div>
    </div><br><br><div id="CopyrightNotice" style="display:none;">
      <hr>
      <table width="100%" style="font-size:15">
        <tr>
          <td align="left">
                © Copyright 2017 Autodesk, Inc.
              </td>
          <td align="right"><a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(SplitFaceFeatureSample%20Sample%20Help%20Topic)">Comment on this page.</a></td>
        </tr>
      </table>
    </div>
  </body>
</html>