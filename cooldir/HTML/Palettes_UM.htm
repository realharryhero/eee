<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="topic-type" content="reference-adsk">
    <meta name="helpsystempath" content="/view/NINVFUS/ENU/">
    <link rel="canonical" href="http://help.autodesk.com/cloudhelp/ENU/Fusion-360-API/files/Palettes_UM.htm">
    <meta name="product" content="NINVFUS">
    <meta name="release" content="NA">
    <meta name="book" content="Developer">
    <meta name="component" content="Fusion-360-API">
    <meta name="created" content="06/1/2017">
    <meta name="user-comments" content="enable">
    <meta name="description" content="">
    <meta name="topicid" content="GUID-6C0C8148-98D0-4DBC-A4EC-D8E03A8A3B5B">
    <meta name="experiencelevel" content="expert">
    <meta name="audience" content="programmer">
    <meta name="language" content="ENU">
    <title>Using Palettes</title>
    <link rel="stylesheet" type="text/css" href="../Style/APIHelp-chm.css">
	<link rel="stylesheet" type="text/css" href="/view/clientframework/client.css"/>
	<script type="text/javascript" src="/view/clientframework/client.js"><!--filler--></script> 
	<script>
	  // This turns on the display of the copyright notice which is not visible by default.
	  // Because the head is removed when used in the web help, this function will only exist
	  // when the chm help is being created.
	  window.onload = function() {
		copyrightElement = document.getElementById('CopyrightNotice');
		copyrightElement.style.display = 'block';
	  };
	</script>
</head>
<body>
<link rel="stylesheet" type="text/css" href="../Style/APIHelp.css">
	
<h2 class="api">Using Palettes</h2>
<h3 class="api">Introduction</h3>
<p Class="api">
Palettes provide a very different way of interaction than the typical script or command. You're already used to seeing and working with palettes because Fusion 360 uses palettes for several built-in capabilities. The image below shows several built-in palettes displayed; the browser, Getting Started, Text Commands, and the Rendering Gallery.  
</p>

<div align="center"><img src="../images/PaletteExamples.png" border=0 align="middle" alt="PaletteExamples"></div>
<br>

<p Class="api">
Palettes are very distinct from command dialogs in several ways. First, palettes are not associated with a command and do not have the same lifetime rules that a command has.  A palette can be displayed while the user runs commands and interacts with Fusion 360.  A palette is not even associated with a particular document.  When a palette is displayed it will remain displayed for the entire Fusion 360 session unless you or the user closes it.
</p>  

<p Class="api">
Another difference is that the content of a palette is not defined in the same way as a command. Instead of specifying a list of command inputs like you do when creating a command, the content of a palette is defined by HTML. This means you can display anything in a palette in any way that you want, as long as you can define it using HTML. One way to think of a palette is as a floating browser within Fusion 360.
</p>  

<p Class="api">
Your add-in and the HTML/JavaScript code of the palette are able to communicate with each other via events.  Youâ€™re add-in can call a method which results in a being fired that the JavaScript code associated with the HTML can handle and respond to. The JavaScript associated with the HTML can also call a method that results in an event being fired to your add-in so it can react to changes in the palette. The JavaScript associated with the HTML cannot call the Fusion 360 API. It must pass data to your add-in through the event and then your add-in can call the API.
</p>  

<p Class="api">
Like a command dialog, palettes can be docked to edges of the Fusion 360 window and to other palettes. Unlike a command dialog, you have full control over this with a palette.
</p>

<h3 class="api">Creating Palettes</h3>
<p Class="api">
Palettes are easily created using the add method of the Palettes collection object, which you obtain from the UserInterface object using its palettes property. Just as with other collections, you can also get all of the existing palettes through this collection, including the standard (built-in) Fusion 360 palettes. The code below creates a new custom palette.</p>

<pre class="api-code">palette = _ui.palettes.add('myPalette', 'My Palette', 'palette.html', False, True, True, 300, 200)</pre>

<p class="api-code">The first argument is the id of the palette, which must be unique with respect to all other palettes that exist in this session of Fusion 360. The second argument is the name as displayed at the top of the palette. The third argument references the html file that is to be displayed within the palette. This can be a full path to a file on disk, or a relative path, which is relative to the .py or .dll file of the add-in.  In the example above, it's assumed that "palette.html" is in the same location as the .py or .dll file. This can also be a reference to an html file on the web such as in the example below.</p>

<pre class="api-code">palette = _ui.palettes.add('myPalette', 'My Palette', <mark>'http://www.autodesk.com'</mark>, False, True, True, 300, 200)
palette.setPosition(800,400)
palette.isVisible = True
</pre>

<p class="api-code">The next three arguments are Boolean arguments that specify if the palette should be visible, if a "Close" button should be displayed, and if it should be resizable. By first creating a palette invisibly, you have the opportunity to set some other properties before making it visible, which the example above takes advantage of to set the position. A palette displaying the Autodesk website with a "Close" button is shown below.</p>

<div align="center"><img src="../images/PaletteClose.png" border=0 align="middle" alt="PaletteClose"></div>
<br>

<h3 class="api">Communication Between the Add-In and Palette</h3>
<p Class="api">
Being able to have a floating browser window within Fusion 360 is useful but not very powerful by itself, especially when you want to use it for some kind of interaction with the user and the model. The referenced html can be very sophisticated where you can use css and reference JavaScript libraries. It can contain or reference JavaScript code so the html can be dynamic. But where it can become much more powerful is when your add-in and the JavaScript associated with the HTML communicate with each other. This is a two-way communication to allow your add-in to send information to the HTML and for your HTML to send information to your add-in. This communication is done through events.</p>
</p>

<p Class="api">
To pass information from your add-in to the JavaScript associated with the HTML you call the sendInfoToHTML method of the Palette object that you created, as shown below. There are two arguments that let you pass two strings to the JavaScript code through the event. The first argument is referred to as the "action" argument and can be used as a qualifier to indicate what type of data is being passed. The second argument is the data itself which will often be a JSON string containing whatever information you need to pass. That's the standard use of the arguments but Fusion 360 doesn't do any validation of the data being passed and makes no assumptions about what they contain but just passes them on so you can choose to use them in any way you want.</p>
</p>

<pre class="api-code">retVal = palette.sendInfoToHTML('send', 'This is the data.')</pre>

<p Class="api">
To handle the event on the HTML side you need to implement a handler in your JavaScript code. An example is shown below. The return value is also a string and is passed back to your add-in as the return argument of the sendInfoToHTML method. Any empty string return is interpreted as an error so you should always return something in both success and failure cases.</p>
</p>

<pre class="api-code">window.fusionJavaScriptHandler = {handle: function(action, data){
    try {
        switch (action) {
            case 'send':
                <span style="color:blue">// Update a paragraph with the data passed in.</span>
                document.getElementById('p1').innerHTML = data
                break;
            case 'debugger':
                debugger;
                break;
        }
    } catch (e) {
        console.log(e);
        console.log('exception caught with action: ' + action + ', data: ' + data);
        return 'FAILED';
    }
    return 'OK';
}};</pre>
<br />

<p Class="api">
To send information from the HTML to your add-in you call the <code>adsk.fusionSendData</code> function. This is very similar to the sendInfoToHTML in that there are two arguments; one for the action, and one for the data.  In this case the data is being passed to your add-in in Fusion 360, which is receives by handling the incomingFromHTML event of the Palette object. The values of the two arguments are accessed through the HTMLEventArgs object passed into the event handler.</p>

<p Class="api">
Below is an example of a JavaScript function that builds up a JSON string with some data and then passes it to Fusion 360 by calling the fusionSendData method.
</p>

<pre class="api-code">function sendInfoToFusion(){
    <span style="color:blue">// Bundle the data into a JSON string.</span>
    var args = {
        arg1 : "Sample argument 1",
        arg2 : "Sample argument 2"
    };

    <span style="color:blue">// Call the Fusion 360 function to pass the data and trigger the incomingFromHTML event in the add-in.</span>
    adsk.fusionSendData('send', JSON.stringify(args));
}

if ui.activeCommand != 'SelectCommand':
    ui.commandDefinitions.itemById('SelectCommand').execute()
</pre>
<br />

<p Class="api">
Below is an example of the handler implemented by the add-in. It gets the two arguments through the HTMLEventArgs object passed in through the event, extracts the information from the JSON string, and displays the results in a message box.
</p>

<pre class="api-code">class MyHTMLEventHandler(adsk.core.HTMLEventHandler):
    def __init__(self):
        super().__init__()
    def notify(self, args):
        try:
            htmlArgs = adsk.core.HTMLEventArgs.cast(args)            
            data = json.loads(htmlArgs.data)
            msg = "An event has been fired from the html to Fusion 360 with the following data:\n"
            msg += '    Action: {}\n    arg1: {}\n    arg2: {}'.format(htmlArgs.action, data['arg1'], data['arg2'])
            _ui.messageBox(msg)
        except:
            _ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))           
</pre>
<br />
<p Class="api">
You can see all of this in action with the <a href="PaletteSample_Sample.htm">Palette sample program</a>.
</p>

<br />
<br />
<div id="CopyrightNotice" style="display:none;">
  <hr />
  <table width="100%" style="font-size:15">
	<tr>
	  <td align="left">
		&copy; Copyright 2017 Autodesk, Inc.
	  </td>
	  <td align="right">
		<a href="mailto:mfg.api.help.comments@autodesk.com&subject=Fusion%20December 2017%20API%20Help%20(Palettes_UM)">Comment on this page.</a>
	  </td>
	</tr>
  </table>
</div>
</body>
</html>